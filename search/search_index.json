{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Build your code-first agent with Azure AI Foundry","text":""},{"location":"#a-75-minute-interactive-workshop","title":"A 75-minute interactive workshop","text":"<p>Imagine you are a sales manager at Contoso, a multinational retail company that sells outdoor equipment. You need to analyze sales data to find trends, understand customer preferences, and make informed business decisions. To help you, Contoso has developed a conversational agent that can answer questions about your sales data.</p> <p></p>"},{"location":"#what-is-an-llm-powered-ai-agent","title":"What is an LLM-Powered AI Agent?","text":"<p>A Large Language Model (LLM) powered AI Agent is semi-autonomous software designed to achieve a given goal without requiring predefined steps or processes. Instead of following explicitly programmed instructions, the agent determines how to accomplish a task using instructions and context.</p> <p>For example, if a user asks, \"Show the total sales by region as a pie chart\", the app doesn't rely on predefined logic for this request. Instead, the LLM interprets the request, manages the conversation flow and context, and orchestrates the necessary actions to produce the regional sales pie chart.</p> <p>Unlike traditional applications, where developers define the logic and workflows to support business processes, AI Agents shift this responsibility to the LLM. In these systems, prompt engineering, clear instructions, and tool development are critical to ensuring the app performs as intended.</p>"},{"location":"#introduction-to-the-azure-ai-foundry","title":"Introduction to the Azure AI Foundry","text":"<p>Azure AI Foundry is Microsoft\u2019s secure, flexible platform for designing, customizing, and managing AI apps and agents. Everything\u2014models, agents, tools, and observability\u2014lives behind a single portal, SDK, and REST endpoint, so you can ship to cloud or edge with governance and cost controls in place from day one.</p> <p></p>"},{"location":"#what-is-the-foundry-agent-service","title":"What is the Foundry Agent Service?","text":"<p>The Foundry Agent Service offers a fully managed cloud service with SDKs for Python, C#, and TypeScript. It simplifies AI agent development, reducing complex tasks like function calling to just a few lines of code.</p> <p>Info</p> <p>Function calling allows you to connect LLMs to external tools and systems. This is useful for many things such as empowering AI agents with capabilities, or building deep integrations between your applications and LLMs.</p> <p>The Foundry Agent Service offers several advantages over traditional agent platforms:</p> <ul> <li>Rapid Deployment: Optimized SDK for fast deployment, letting developers focus on building agents.</li> <li>Scalability: Designed to handle varying user loads without performance issues.</li> <li>Custom Integrations: Supports Function Calling for extending agent capabilities.</li> <li>Built-in Tools: Includes Fabric, SharePoint, Azure AI Search, and Azure Storage for quick development.</li> <li>RAG-Style Search: Features a built-in vector store for efficient file and semantic search.</li> <li>Conversation State Management: Maintains context across multiple interactions.</li> <li>AI Model Compatibility: Works with various AI models.</li> </ul> <p>Learn more about the Foundry Agent Service in the Foundry Agent Service documentation.</p>"},{"location":"#ai-agent-frameworks","title":"AI Agent Frameworks","text":"<p>Popular agent frameworks include LangChain, Semantic Kernel, and CrewAI. What distinguishes the Foundry Agent Service is its seamless integration capabilities and an SDK optimized for rapid deployment. In complex multi-agent scenarios, solutions will combine SDKs like Semantic Kernel and AutoGen with the Foundry Agent Service to build robust and scalable systems.</p>"},{"location":"_lab-6-instrumentation/","title":"lab 6 instrumentation","text":""},{"location":"_lab-6-instrumentation/#introduction","title":"Introduction","text":"<p>Troubleshooting and debugging complex agents can be challenging due to the high number of steps, variability in execution sequences based on user input, lengthy inputs and outputs requiring detailed inspection, and nested processes where tools invoke other tools. Tracing addresses these challenges by providing a clear, sequential view of the inputs and outputs at each stage of an agent\u2019s execution, making it easier to identify and resolve issues.</p>"},{"location":"_lab-6-instrumentation/#lab-exercise","title":"Lab Exercise","text":"<p>This lab is intended for informational purposes only and does not include any exercises.</p> <p>Take a moment to review the Tracing using Application Insights.</p>"},{"location":"architecture/","title":"Solution Architecture","text":"<p>In this workshop, you will create the Contoso Sales Agent: a conversational agent designed to answer questions about sales data, generate charts, and download data files for further analysis.</p>"},{"location":"architecture/#components-of-the-agent-app","title":"Components of the Agent App","text":"<ol> <li> <p>Microsoft Azure services</p> <p>This agent is built on Microsoft Azure services.</p> <ul> <li> <p>Generative AI model: The underlying LLM powering this app is the Azure OpenAI gpt-4o-mini LLM.</p> </li> <li> <p>Vector Store: We will provide the agent with product information as a PDF file to support its queries. The agent will use the \"basic agent setup\" of the Foundry Agent Service file search tool to find relevant portions of the document with vector search and provide them to the agent as context.</p> </li> <li> <p>Control Plane: The app and its architectural components are managed and monitored using the Azure AI Foundry portal, accessible via the browser.</p> </li> </ul> </li> <li> <p>Azure AI Foundry (SDK)</p> <p>The workshop is offered in both Python and C# using the Azure AI Foundry SDK. The SDK supports key features of the Azure AI Agents service, including Code Interpreter and Function Calling.</p> </li> <li> <p>Database</p> <p>The app is informed by the Contoso Sales Database, a SQLite database containing 40,000 rows of synthetic data. At startup, the agent app reads the sales database schema, product categories, product types, and reporting years, then incorporates this metadata into the Foundry Agent Service\u2019s instruction context.</p> </li> </ol>"},{"location":"architecture/#extending-the-workshop-solution","title":"Extending the Workshop Solution","text":"<p>The workshop solution is highly adaptable to various scenarios, such as customer support, by modifying the database and tailoring the Foundry Agent Service instructions to suit specific use cases. It is intentionally designed to be interface-agnostic, allowing you to focus on the core functionality of the AI Agent Service and apply the foundational concepts to build your own conversational agent.</p>"},{"location":"architecture/#best-practices-demonstrated-in-the-app","title":"Best Practices Demonstrated in the App","text":"<p>The app also demonstrates some best practices for efficiency and user experience.</p> <ul> <li> <p>Asynchronous APIs:   In the workshop sample, both the Foundry Agent Service and SQLite use asynchronous APIs, optimizing resource efficiency and scalability. This design choice becomes especially advantageous when deploying the application with asynchronous web frameworks like FastAPI, ASP.NET, Chainlit, or Streamlit.</p> </li> <li> <p>Token Streaming:   Token streaming is implemented to improve user experience by reducing perceived response times for the LLM-powered agent app.</p> </li> </ul>"},{"location":"finishing-up/","title":"Lab 5 Finishing Up","text":"@Skillable WorkshopSelf-Guided Learners <p>That's all for the lab portion of this workshop. Read on for key takeaways and additional resources, but first let's make it easy for you to retrieve and re-use this workshop material back home.</p> <p>That's all for the lab portion of this workshop. Read on for key takeaways and additional resources, but first let's tidy up.</p>"},{"location":"finishing-up/#star-the-github-repository","title":"Star the GitHub Repository","text":"<p>If you have a GitHub account, you can \"star\" this repository to make it easy for you to find again in the future.</p> <ul> <li>Visit the GitHub repository at: microsoft/build-your-first-agent-with-azure-ai-agent-service-workshop</li> <li>Log into your GitHub account</li> <li>Click Star in the top right</li> </ul> <p>To find this workshop again in the future, click your GitHub profile picture in the top-right and click Your stars.</p>"},{"location":"finishing-up/#star-the-github-repository_1","title":"Star the GitHub Repository","text":"<p>If you have a GitHub account, you can \"star\" this repository to make it easy for you to find again in the future.</p> <ul> <li>Visit the GitHub repository at: microsoft/build-your-first-agent-with-azure-ai-agent-service-workshop</li> <li>Log into your GitHub account</li> <li>Click Star in the top right</li> </ul> <p>To find this workshop again in the future, click your GitHub profile picture in the top-right and click Your stars.</p>"},{"location":"finishing-up/#clean-up-github-codespaces","title":"Clean up GitHub CodeSpaces","text":""},{"location":"finishing-up/#save-your-changes-in-github","title":"Save your changes in GitHub","text":"<p>You can save any changes you have made to files during the workshop to your personal GitHub repository as a fork. This makes it easy to re-run the workshop with your customizations, and the workshop content will always remain available in your GitHub account.</p> <ul> <li>In VS Code, click the \"Source Control\" tool in the left pane. It's the third one down, or you can use the keyboard shortcut Control-Shift-G.</li> <li>In the field under \"Source Control\" enter <code>Agents Lab</code> and click \u2714\ufe0fCommit.</li> <li>Click Yes to the prompt \"There are no staged changes to commit.\"</li> <li>Click Sync Changes.</li> <li>Click OK to the prompt \"This action will pull and push commits from and to origin/main\".</li> </ul> <p>You now have your own copy of the workshop with your customizations in your GitHub account.</p>"},{"location":"finishing-up/#delete-your-github-codespace","title":"Delete your GitHub codespace","text":"<p>Your GitHub CodeSpace will shut down by itself, but it will consume a small amount of your compute and storage allotment until it is deleted. (You can see your usage in your GitHub Billing summary.) You can safely delete the codespace now, as follows:</p> <ul> <li>Visit github.com/codespaces</li> <li>At the bottom of the page, click the \"...\" menu to the right of your active codespace</li> <li>Click Delete</li> <li>At the \"Are you sure?\" prompt, click Delete.</li> </ul>"},{"location":"finishing-up/#delete-your-azure-resources","title":"Delete your Azure resources","text":"<p>Most of the resources you created in this lab are pay-as-you-go resources, meaning you won't be charged any more for using them. However, some storage services used by AI Foundry may incur small ongoing charges. To delete all resources, follow these steps:</p> <ul> <li>Visit the Azure Portal</li> <li>Click Resource groups</li> <li>Click on your resource group <code>rg-agent-workshop-****</code></li> <li>Click Delete Resource group</li> <li>In the field at the bottom \"Enter resource group name to confirm deletion\" enter <code>rg-agent-workshop-****</code></li> <li>Click Delete</li> <li>At the Delete Confirmation prompt, click \"Delete\"</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Select your workshop experience:</p> @Skillable WorkshopSelf-Guided Learners"},{"location":"getting-started/#microsoft-build-attendees","title":"Microsoft Build Attendees","text":"<p>The instructions on this page assume you are attending Microsoft Build 2025 and have access to a pre-configured lab environment. This environment provides an Azure subscription with all the tools and resources needed to complete the workshop.</p>"},{"location":"getting-started/#introduction","title":"Introduction","text":"<p>This workshop is designed to teach you about the Azure AI Agents Service and the associated SDK. It consists of multiple labs, each highlighting a specific feature of the Azure AI Agents Service. The labs are meant to be completed in order, as each one builds on the knowledge and work from the previous lab.</p>"},{"location":"getting-started/#select-workshop-programming-language","title":"Select Workshop Programming Language","text":"<p>The workshop is available in both Python and C#. Please make sure to select the language that fits the lab room you are in, by using the language selector tabs. Note, don't switch languages mid-workshop.</p> <p>Select the language tab that matches your lab room:</p> PythonC# <p>The default language for the workshop is set to Python.</p> <p>The default language for the workshop is set to C#.</p>"},{"location":"getting-started/#authenticate-with-azure","title":"Authenticate with Azure","text":"<p>You need to authenticate with Azure so the agent app can access the Azure AI Agents Service and models. Follow these steps:</p> <ol> <li> <p>Open a terminal window. The terminal app is pinned to the Windows 11 taskbar.</p> <p></p> </li> <li> <p>Run the following command to authenticate with Azure:</p> <pre><code>az login\n</code></pre> <p>Note</p> <p>You'll be prompted to open a browser link and log in to your Azure account.</p> <ol> <li> <p>A browser window will open automatically, select Work or school account and click Next.</p> </li> <li> <p>Use the Username and Password found in the top section of the Resources tab in the lab environment.</p> </li> <li> <p>Select OK, then Done.</p> </li> </ol> </li> <li> <p>Then select the Default subscription from the command line, by clicking on Enter.</p> </li> <li> <p>Once you've logged in, run the following command to assign the user role to the resource group:</p> <pre><code>$subId = $(az account show --query id --output tsv) `\n;$objectId = $(az ad signed-in-user show --query id -o tsv) `\n; az role assignment create --role \"f6c7c914-8db3-469d-8ca1-694a8f32e121\" --assignee-object-id $objectId --scope /subscriptions/$subId/resourceGroups/\"rg-agent-workshop\" --assignee-principal-type 'User'\n</code></pre> </li> <li> <p>Leave the terminal window open for the next steps.</p> </li> </ol>"},{"location":"getting-started/#open-the-workshop","title":"Open the Workshop","text":"<p>Follow these steps to open the workshop in Visual Studio Code:</p> PythonC# <ol> <li> <p>From the terminal window, execute the following commands to clone the workshop repository, navigate to the relevant folder, set up a virtual environment, activate it, and install the required packages:</p> <pre><code>git clone https://github.com/microsoft/build-your-first-agent-with-azure-ai-agent-service-workshop.git `\n; cd build-your-first-agent-with-azure-ai-agent-service-workshop `\n; python -m venv src/python/workshop/.venv `\n; src\\python\\workshop\\.venv\\Scripts\\activate `\n; pip install -r src/python/workshop/requirements.txt `\n; code --install-extension tomoki1207.pdf\n</code></pre> </li> <li> <p>Open in VS Code. From the terminal window, run the following command:</p> <pre><code>code .vscode\\python-workspace.code-workspace\n</code></pre> <p>When the project opens in VS Code, two notifications appear in the bottom right corner. Click \u2716 to close both notifications.</p> </li> </ol> <ol> <li> <p>From a terminal window, execute the following commands to clone the workshop repository:</p> <pre><code>git clone https://github.com/microsoft/build-your-first-agent-with-azure-ai-agent-service-workshop.git\n</code></pre> </li> </ol> VS CodeVisual Studio 2022 <ol> <li> <p>Open the workshop in Visual Studio Code. From the terminal window, run the following command:</p> <pre><code>code build-your-first-agent-with-azure-ai-agent-service-workshop\\.vscode\\csharp-workspace.code-workspace\n</code></pre> </li> </ol> <p>When the project opens in VS Code, a notification will appear in the bottom right corner to install the C# extension. Click Install to install the C# extension, as this will provide the necessary features for C# development.</p> <ol> <li> <p>Open the workshop in Visual Studio 2022. From the terminal window, run the following command:</p> <pre><code>start build-your-first-agent-with-azure-ai-agent-service-workshop\\src\\csharp\\workshop\\AgentWorkshop.sln\n</code></pre> <p>You may be asked what program to open the solution with. Select Visual Studio 2022.</p> </li> </ol>"},{"location":"getting-started/#azure-ai-foundry-project-endpoint","title":"Azure AI Foundry Project Endpoint","text":"<p>Next, we log in to Azure AI Foundry to retrieve the project endpoint, which the agent app uses to connect to the Azure AI Agents Service.</p> <ol> <li>Navigate to the Azure AI Foundry website.</li> <li>Select Sign in and use the Username and Password found in the top section of the Resources tab in the lab environment. Click on the Username and Password fields to automatically fill in the login details.     </li> <li>Read the introduction to the Azure AI Foundry and click Got it.</li> <li>Navigate to All Resources to view the list of AI resources that have been pre-provisioned for you.</li> <li>Select the resource name that starts with prj-contoso-agent-nnnnnn.</li> <li>Review the introduction guide and click Close.</li> <li> <p>From the Overview sidebar menu, locate the Endpoints and keys -&gt; Libraries -&gt; Azure AI Foundry section, click the Copy icon to copy the Azure AI Foundry project endpoint.</p> <p></p> </li> </ol> PythonC#"},{"location":"getting-started/#configure-the-workshop","title":"Configure the Workshop","text":"<ol> <li>Switch back to the workshop you opened in VS Code.</li> <li> <p>Rename the <code>.env.sample</code> file to <code>.env</code>.</p> <ul> <li>Select the .env.sample file in the VS Code Explorer panel.</li> <li>Right-click the file and select Rename, or press F2.</li> <li>Change the file name to <code>.env</code> and press Enter.</li> </ul> </li> <li> <p>Paste the Project endpoint you copied from Azure AI Foundry into the <code>.env</code> file.</p> <pre><code>PROJECT_ENDPOINT=\"&lt;project endpoint&gt;\"\n</code></pre> <p>Your <code>.env</code> file should look similar to this but with your project endpoint.</p> <pre><code>MODEL_DEPLOYMENT_NAME=\"gpt-4o-mini\"\nPROJECT_ENDPOINT=\"&lt;project endpoint&gt;\"\n</code></pre> </li> <li> <p>Save the <code>.env</code> file.</p> </li> </ol>"},{"location":"getting-started/#project-structure","title":"Project Structure","text":"<p>Be sure to familiarize yourself with the key subfolders and files you\u2019ll be working with throughout the workshop.</p> <ol> <li>The main.py file: The entry point for the app, containing its main logic.</li> <li>The sales_data.py file: The function logic to execute dynamic SQL queries against the SQLite database.</li> <li>The stream_event_handler.py file: Contains the event handler logic for token streaming.</li> <li>The shared/files folder: Contains the files created by the agent app.</li> <li>The shared/instructions folder: Contains the instructions passed to the LLM.</li> </ol> <p></p>"},{"location":"getting-started/#configure-the-workshop_1","title":"Configure the Workshop","text":"<ol> <li> <p>Open a terminal and navigate to the src/csharp/workshop/AgentWorkshop.Client folder.</p> <pre><code>cd build-your-first-agent-with-azure-ai-agent-service-workshop\\src\\csharp\\workshop\\AgentWorkshop.Client\n</code></pre> </li> <li> <p>Add the Project endpoint you copied from Azure AI Foundry to the user secrets.</p> <pre><code>dotnet user-secrets set \"ConnectionStrings:AiAgentService\" \"&lt;your_project_endpoint&gt;\"\n</code></pre> </li> <li> <p>Add the Model deployment name to the user secrets.</p> <pre><code>dotnet user-secrets set \"Azure:ModelName\" \"gpt-4o-mini\"\n</code></pre> </li> </ol>"},{"location":"getting-started/#project-structure_1","title":"Project Structure","text":"<p>Be sure to familiarize yourself with the key subfolders and files you\u2019ll be working with throughout the workshop.</p>"},{"location":"getting-started/#the-workshop-folder","title":"The workshop folder","text":"<ul> <li>The Lab1.cs, Lab2.cs, Lab3.cs files: The entry point for each lab, containing its agent logic.</li> <li>The Program.cs file: The entry point for the app, containing its main logic.</li> <li>The SalesData.cs file: The function logic to execute dynamic SQL queries against the SQLite database.</li> </ul>"},{"location":"getting-started/#the-shared-folder","title":"The shared folder","text":"<ul> <li>The files folder: Contains the files created by the agent app.</li> <li>The fonts folder: Contains the multilingual fonts used by Code Interpreter.</li> <li>The instructions folder: Contains the instructions passed to the LLM.</li> </ul>"},{"location":"getting-started/#pro-tips","title":"Pro Tips","text":"<p>Tips</p> <ol> <li>The Burger Menu in the right-hand panel of the lab environment offers additional features, including the Split Window View and the option to end the lab. The Split Window View allows you to maximize the lab environment to full screen, optimizing screen space. The lab's Instructions and Resources panel will open in a separate window.</li> <li>If the lab instructions are slow to scroll in the lab environment, try copying the instructions\u2019 URL and opening it in your computer\u2019s local browser for a smoother experience.</li> <li>If you have trouble viewing an image, simply click the image to enlarge it.</li> </ol>"},{"location":"getting-started/#self-guided-learners","title":"Self-Guided Learners","text":"<p>These instructions are for self-guided learners who do not have access to a pre-configured lab environment. Follow these steps to set up your environment and begin the workshop.</p>"},{"location":"getting-started/#introduction_1","title":"Introduction","text":"<p>This workshop is designed to teach you about the Azure AI Agents Service and the associated SDK. It consists of multiple labs, each highlighting a specific feature of the Azure AI Agents Service. The labs are meant to be completed in order, as each one builds on the knowledge and work from the previous lab.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ol> <li>Access to an Azure subscription. If you don't have an Azure subscription, create a free account before you begin.</li> <li>You need a GitHub account. If you don\u2019t have one, create it at GitHub.</li> </ol>"},{"location":"getting-started/#select-workshop-programming-language_1","title":"Select Workshop Programming Language","text":"<p>The workshop is available in both Python and C#. Use the language selector tabs to choose your preferred language. Note, don't switch languages mid-workshop.</p> <p>Select the tab for your preferred language:</p> PythonC# <p>The default language for the workshop is set to Python.</p> <p>The default language for the workshop is set to C#.</p>"},{"location":"getting-started/#open-the-workshop_1","title":"Open the Workshop","text":"<p>The preferred way to run this workshop is using GitHub Codespaces. This option provides a pre-configured environment with all the tools and resources needed to complete the workshop. Alternatively, you can open the workshop locally using a Visual Studio Code Dev Container.</p> GitHub CodespacesVS Code Dev Container <p>Select Open in GitHub Codespaces to open the project in GitHub Codespaces.</p> <p></p> <p>Building the Codespace will take several minutes. You can continue reading the instructions while it builds.</p> <p>Apple Silicon Users</p> <p>The automated deployment script you\u2019ll be running soon isn\u2019t supported on Apple Silicon. Please run the deployment script from Codespaces or from macOS instead of the Dev Container.</p> <p>Alternatively, you can open the project locally using a Visual Studio Code Dev Container, which will open the project in your local VS Code development environment using the Dev Containers extension.</p> <ol> <li>Start Docker Desktop (install it if not already installed)</li> <li> <p>Select Dev Containers Open to open the project in a VS Code Dev Container.</p> <p></p> </li> </ol> <p>The process of building the Dev Container, which involves downloading and setting it up on your local system, will take several minutes. During this time, you can continue reading the instructions.</p>"},{"location":"getting-started/#authenticate-with-azure_1","title":"Authenticate with Azure","text":"<p>You need to authenticate with Azure so the agent app can access the Azure AI Agents Service and models. Follow these steps:</p> <ol> <li>Ensure the Codespace has been created.</li> <li>In the Codespace, open a new terminal window by selecting Terminal &gt; New Terminal from the VS Code menu.</li> <li> <p>Run the following command to authenticate with Azure:</p> <pre><code>az login --use-device-code\n</code></pre> <p>Note</p> <p>You'll be prompted to open a browser link and log in to your Azure account. Be sure to copy the authentication code first.</p> <ol> <li>A browser window will open automatically, select your account type and click Next.</li> <li>Sign in with your Azure subscription Username and Password.</li> <li>Paste the authentication code.</li> <li>Select OK, then Done.</li> </ol> <p>Warning</p> <p>If you have multiple Azure tenants, then you will need to select the appropriate tenant when authenticating.</p> <pre><code>az login --use-device-code --tenant &lt;tenant_id&gt;\n</code></pre> </li> <li> <p>Next, select the appropriate subscription from the command line.</p> </li> <li>Leave the terminal window open for the next steps.</li> </ol>"},{"location":"getting-started/#deploy-the-azure-resources","title":"Deploy the Azure Resources","text":"<p>The following resources will be created in the rg-contoso-agent-workshop-nnnn resource group in your Azure subscription.</p> <ul> <li>An Azure AI Foundry hub named fdy-contoso-agent-nnnn</li> <li>An Azure AI Foundry project named prj-contoso-agent-nnnn</li> <li>A Serverless (pay-as-you-go) GPT-4o-mini model deployment named gpt-4o-mini. See pricing details here.</li> </ul> <p>You will need 120K TPM quota availability for the gpt-4o-mini Global Standard SKU, not because the agent uses lots of tokens, but due to the frequency of calls made by the agent to the model. Review your quota availability in the AI Foundry Management Center.</p> <p>We have provided a bash script to automate the deployment of the resources required for the workshop.</p> <p>The script <code>deploy.sh</code> deploys to the <code>westus</code> region by default; edit the file to change the region or resource names. To run the script, open the VS Code terminal and run the following command:</p> <pre><code>cd infra &amp;&amp; ./deploy.sh\n</code></pre>"},{"location":"getting-started/#workshop-configuration","title":"Workshop Configuration","text":"PythonC# <p>The deploy script generates the .env file, which contains the project endpoint, model deployment name. </p> <p>You'll see this file when you open the Python workspace in VS Code. Your .env file will look similar to this but with your project endpoint.</p> <pre><code>MODEL_DEPLOYMENT_NAME=\"gpt-4o-mini\"\nPROJECT_ENDPOINT=\"&lt;your_project_endpoint&gt;\"\n</code></pre> <p>The automated deployment script stores project variables securely by using the Secret Manager feature for safe storage of app secrets in development in ASP.NET Core.</p> <p>You can view the secrets by running the following command after you have opened the C# workspace in VS Code:</p> <pre><code>dotnet user-secrets list\n</code></pre>"},{"location":"getting-started/#selecting-the-language-workspace","title":"Selecting the Language Workspace","text":"<p>There are two workspaces in the workshop, one for Python and one for C#. The workspace contains the source code and all the files needed to complete the labs for each language. Choose the workspace that matches the language you want to work with.</p> PythonC# <ol> <li>In Visual Studio Code, go to File &gt; Open Workspace from File.</li> <li> <p>Replace the default path with the following:</p> <pre><code>/workspaces/build-your-first-agent-with-azure-ai-agent-service-workshop/.vscode/\n</code></pre> </li> <li> <p>Choose the file named python-workspace.code-workspace to open the workspace.</p> </li> </ol> <ol> <li>In Visual Studio Code, go to File &gt; Open Workspace from File.</li> <li> <p>Replace the default path with the following:</p> <pre><code>/workspaces/build-your-first-agent-with-azure-ai-agent-service-workshop/.vscode/\n</code></pre> </li> <li> <p>Choose the file named csharp-workspace.code-workspace to open the workspace.</p> </li> </ol>"},{"location":"getting-started/#project-structure_2","title":"Project Structure","text":"<p>Be sure to familiarize yourself with the key folders and files you\u2019ll be working with throughout the workshop.</p>"},{"location":"getting-started/#the-workshop-folder_1","title":"The workshop folder","text":"<ul> <li>The main.py file: The entry point for the app, containing its main logic.</li> <li>The sales_data.py file: The function logic to execute dynamic SQL queries against the SQLite database.</li> <li>The stream_event_handler.py file: Contains the event handler logic for token streaming.</li> </ul>"},{"location":"getting-started/#the-shared-folder_1","title":"The shared folder","text":"<ul> <li>The files folder: Contains the files created by the agent app.</li> <li>The fonts folder: Contains the multilingual fonts used by Code Interpreter.</li> <li>The instructions folder: Contains the instructions passed to the LLM.</li> </ul>"},{"location":"getting-started/#project-structure_3","title":"Project Structure","text":"<p>Be sure to familiarize yourself with the key folders and files you\u2019ll be working with throughout the workshop.</p>"},{"location":"getting-started/#the-workshop-folder_2","title":"The workshop folder","text":"<ul> <li>The Lab1.cs, Lab2.cs, Lab3.cs files: The entry point for each lab, containing its agent logic.</li> <li>The Program.cs file: The entry point for the app, containing its main logic.</li> <li>The SalesData.cs file: The function logic to execute dynamic SQL queries against the SQLite database.</li> </ul>"},{"location":"getting-started/#the-shared-folder_2","title":"The shared folder","text":"<ul> <li>The files folder: Contains the files created by the agent app.</li> <li>The fonts folder: Contains the multilingual fonts used by Code Interpreter.</li> <li>The instructions folder: Contains the instructions passed to the LLM.</li> </ul>"},{"location":"lab-1-function_calling/","title":"Lab 1 Function Calling Power","text":""},{"location":"lab-1-function_calling/#introduction","title":"Introduction","text":""},{"location":"lab-1-function_calling/#what-is-function-calling","title":"What is Function Calling","text":"<p>Function calling enables Large Language Models to interact with external systems. The LLM determines when to invoke a function based on instructions, function definitions, and user prompts. The LLM then returns structured data that can be used by the agent app to invoke a function.</p> <p>It's up to the developer to implement the function logic within the agent app. In this workshop, we use function logic to execute SQLite queries that are dynamically generated by the LLM.</p>"},{"location":"lab-1-function_calling/#enabling-function-calling","title":"Enabling Function Calling","text":"<p>If you\u2019re familiar with Azure OpenAI Function Calling, you know it requires you to define a function schema for the LLM.</p> PythonC# <p>With the Foundry Agent Service and its Python SDK, you can define the function schema directly within the Python function\u2019s docstring. This approach keeps the definition and implementation together, simplifying maintenance and enhancing readability.</p> <p>For example, in the sales_data.py file, the async_fetch_sales_data_using_sqlite_query function uses a docstring to specify its signature, inputs, and outputs. The SDK parses this docstring to generate the callable function for the LLM:</p> <pre><code>async def async_fetch_sales_data_using_sqlite_query(self: \"SalesData\", sqlite_query: str) -&gt; str:\n    \"\"\"\n    This function is used to answer user questions about Contoso sales data by executing SQLite queries against the database.\n\n    :param sqlite_query: The input should be a well-formed SQLite query to extract information based on the user's question. The query result will be returned as a JSON object.\n    :return: Return data in JSON serializable format.\n    :rtype: str\n    \"\"\"\n</code></pre> <p>With the Foundry Agent Service and its .NET SDK, you define the function schema as part of the C# code when adding the function to the agent.</p> <p>For example, in the Lab.cs file, the <code>InitialiseTools</code> method defines the function schema for the <code>FetchSalesDataAsync</code> function:</p> <pre><code>new FunctionToolDefinition(\n    name: nameof(SalesData.FetchSalesDataAsync),\n    description: \"This function is used to answer user questions about Contoso sales data by executing SQLite queries against the database.\",\n    parameters: BinaryData.FromObjectAsJson(new {\n        Type = \"object\",\n        Properties = new {\n            Query = new {\n                Type = \"string\",\n                Description = \"The input should be a well-formed SQLite query to extract information based on the user's question. The query result will be returned as a JSON object.\"\n            }\n        },\n        Required = new [] { \"query\" }\n    },\n    new JsonSerializerOptions() { PropertyNamingPolicy = JsonNamingPolicy.CamelCase })\n)\n</code></pre>"},{"location":"lab-1-function_calling/#dynamic-sql-generation","title":"Dynamic SQL Generation","text":"<p>When the app starts, it incorporates the database schema and key data into the instructions for the Foundry Agent Service. Using this input, the LLM generates SQLite-compatible SQL queries to respond to user requests expressed in natural language.</p>"},{"location":"lab-1-function_calling/#lab-exercise","title":"Lab Exercise","text":"<p>In this lab, you will enable the function logic to execute dynamic SQL queries against the SQLite database. The function is called by the LLM to answer user questions about Contoso sales data.</p> PythonC# <ol> <li> <p>Open the <code>main.py</code>.</p> </li> <li> <p>Uncomment the following lines by removing the \"# \" characters</p> <pre><code># INSTRUCTIONS_FILE = \"instructions/instructions_function_calling.txt\"\n\n# toolset.add(functions)\n</code></pre> <p>Warning</p> <p>The lines to be uncommented are not adjacent. When removing the # character, ensure you also delete the space that follows it. You might want to use the shortcut CTRL-K + CTRL-U to uncomment a selected code section quicker.  </p> </li> <li> <p>Review the Code in main.py.</p> <p>After uncommenting, your code should look like this:</p> <pre><code>INSTRUCTIONS_FILE = \"instructions/function_calling.txt\"\n# INSTRUCTIONS_FILE = \"instructions/file_search.txt\"\n# INSTRUCTIONS_FILE = \"instructions/code_interpreter.txt\"\n# INSTRUCTIONS_FILE = \"instructions/code_interpreter_multilingual.txt\"\n\n\n\nasync def add_agent_tools() -&gt; None:\n    \"\"\"Add tools for the agent.\"\"\"\n    font_file_info = None\n\n    # Add the functions tool\n    toolset.add(functions)\n\n    # Add the tents data sheet to a new vector data store\n    # vector_store = await utilities.create_vector_store(\n    #     agents_client,\n    #     files=[TENTS_DATA_SHEET_FILE],\n    #     vector_store_name=\"Contoso Product Information Vector Store\",\n    # )\n    # file_search_tool = FileSearchTool(vector_store_ids=[vector_store.id])\n    # toolset.add(file_search_tool)\n\n    # Add the code interpreter tool\n    # code_interpreter = CodeInterpreterTool()\n    # toolset.add(code_interpreter)\n\n    # Add multilingual support to the code interpreter\n    # font_file_info = await utilities.upload_file(agents_client, utilities.shared_files_path / FONTS_ZIP)\n    # code_interpreter.add_file(file_id=font_file_info.id)\n\n    return font_file_info\n</code></pre> </li> </ol> <ol> <li> <p>Open the <code>Program.cs</code> file.</p> </li> <li> <p>Uncomment and update the following code:</p> <pre><code>await using Lab lab = new Lab1(projectClient, apiDeploymentName);\nawait lab.RunAsync();\n</code></pre> </li> </ol>"},{"location":"lab-1-function_calling/#review-the-instructions","title":"Review the Instructions","text":"<ol> <li> <p>Open the shared/instructions/function_calling.txt file.</p> <p>In VS Code, press Alt + Z (Windows/Linux) or Option + Z (Mac) to enable word wrap mode, making the instructions easier to read.</p> </li> <li> <p>Review how the instructions define the agent app\u2019s behavior:</p> <ul> <li>Role definition: The agent assists Contoso users with sales data inquiries in a polite, professional, and friendly manner.</li> <li>Context: Contoso is an online retailer specializing in camping and sports gear.</li> <li>Tool description \u2013 \u201cSales Data Assistance\u201d:<ul> <li>Enables the agent to generate and run SQL queries.</li> <li>Includes database schema details for query building.</li> <li>Limits results to aggregated data with a maximum of 30 rows.</li> <li>Formats output as Markdown tables.</li> </ul> </li> <li>Response guidance: Emphasizes actionable, relevant replies.</li> <li>User support tips: Provides suggestions for assisting users.</li> <li>Safety and conduct: Covers how to handle unclear, out-of-scope, or malicious queries.</li> </ul> <p>During the workshop, we\u2019ll extend these instructions by introducing new tools to enhance the agent\u2019s capabilities.</p> <p>Info</p> <p>The {database_schema_string} placeholder in the instructions is replaced with the database schema when the app initializes.</p> PythonC# <pre><code># Replace the placeholder with the database schema string\ninstructions = instructions.replace(\"{database_schema_string}\", database_schema_string)\n</code></pre> <pre><code>// Replace the placeholder with the database schema string\ninstructions = instructions.Replace(\"{database_schema_string}\", databaseSchemaString);\n</code></pre> </li> </ol>"},{"location":"lab-1-function_calling/#run-the-agent-app","title":"Run the Agent App","text":"<ol> <li>Press F5 to run the app.</li> <li> <p>In the terminal, you'll see the app start, and the agent app will prompt you to Enter your query.</p> <p></p> </li> </ol>"},{"location":"lab-1-function_calling/#start-a-conversation-with-the-agent","title":"Start a Conversation with the Agent","text":"<p>Start asking questions about Contoso sales data. For example:</p> <ol> <li> <p>Help</p> <p>Here is an example of the LLM response to the help query:</p> <p>I\u2019m here to help with your sales data inquiries at Contoso. Could you please provide more details about what you need assistance with? Here are some example queries you might consider:</p> <ul> <li>What were the sales by region?</li> <li>What was last quarter's revenue?</li> <li>Which products sell best in Europe?</li> <li>Total shipping costs by region?</li> </ul> <p>Feel free to ask any specific questions related to Contoso sales data!</p> <p>Tip</p> <p>The LLM will provide a list of starter questions that were defined in the instructions file. Try asking for help in your language, for example <code>help in Hindi</code>, <code>help in Italian</code>, or <code>help in Korean</code>.</p> </li> <li> <p>Show the 3 most recent transaction details</p> <p>In the response you can see the raw data stored in the SQLite database. Each record is a single sales transaction for Contoso, with information about the product, product category, sale amount and region, date, and much more.</p> <p>Warning</p> <p>The agent may refuse to respond to this query with a message like \"I'm unable to provide individual transaction details\". This is because the instructions direct it to \"provide aggregated results by default\". If this happens, try again, or reword your query.</p> <p>Large Language models have non-deterministic behavior, and may give different responses even if you repeat the same query.</p> </li> <li> <p>What are the sales by region?</p> <p>Here is an example of the LLM response to the sales by region query:</p> <pre><code>| Region         | Total Revenue  |\n|----------------|----------------|\n| AFRICA         | $5,227,467     |\n| ASIA-PACIFIC   | $5,363,718     |\n| CHINA          | $10,540,412    |\n| EUROPE         | $9,990,708     |\n| LATIN AMERICA  | $5,386,552     |\n| MIDDLE EAST    | $5,312,519     |\n| NORTH AMERICA  | $15,986,462    |\n</code></pre> <p>Info</p> <p>So, what\u2019s happening behind the scenes to make it all work?</p> <p>The LLM orchestrates the following steps:</p> <ol> <li> <p>The LLM generates a SQL query to answer the user's question. For the question \"What are the sales by region?\", the following SQL query is generated:</p> <p>SELECT region, SUM(revenue) AS total_revenue FROM sales_data GROUP BY region;</p> </li> <li> <p>The LLM then asks the agent app to call the async_fetch_sales_data_using_sqlite_query function, which retrieves the required data from the SQLite database and returns it to the LLM.</p> </li> <li>The LLM uses the retrieved data to create a Markdown table, which it then returns to the user. Check the instructions file, you'll see that Markdown is the default output format.</li> </ol> </li> <li> <p>Show sales by category in Europe</p> <p>In this case, an even more complex SQL query is run by the agent app.</p> </li> <li> <p>Breakout sales by footwear</p> <p>Notice how the agent figures out which products fit under the \"footwear\" category and understands the intent behind the term \"breakout\".</p> </li> <li> <p>What brands of tents do we sell?</p> <p>Info</p> <p>We haven't provided the agent with any data containing information about product brands. That's why the agent isn't able to properly answer this question.</p> <p>In the previous responses you may have noticed that the transaction history from the underlying database did not include any product brands or descriptions, either. We'll fix this in the next lab!</p> </li> </ol>"},{"location":"lab-1-function_calling/#optional-debug-the-app","title":"(Optional) Debug the App","text":"<p>Set a breakpoint in the <code>async_fetch_sales_data_using_sqlite_query</code> function located in <code>sales_data.py</code> to observe how the LLM requests data.</p> <p>Note: To use the debug feature, exit the previous run. Then set the breakpoint. Then run the application using the debugger icon in the sidebar. This will open up the debug sidebar, allowing you to watch stack traces and step through execution.</p> <p></p>"},{"location":"lab-1-function_calling/#ask-more-questions","title":"Ask More Questions","text":"<p>Now that you\u2019ve set a breakpoint, ask additional questions about Contoso sales data to observe the function logic in action. Step through the function to execute the database query and return the results to the LLM.</p> <p>Try these questions:</p> <ol> <li>What regions have the highest sales?</li> <li>What were the sales of tents in the United States in April 2022?</li> </ol>"},{"location":"lab-1-function_calling/#disable-the-breakpoint","title":"Disable the Breakpoint","text":"<p>Remember to disable the breakpoint before running the app again.</p>"},{"location":"lab-1-function_calling/#stop-the-agent-app","title":"Stop the Agent App","text":"<p>When you're done, type exit to clean up the agent resources and stop the app.</p>"},{"location":"lab-2-file_search/","title":"Lab 2 Grounding with Documents","text":""},{"location":"lab-2-file_search/#introduction","title":"Introduction","text":"<p>Grounding a conversation with documents is highly effective, especially for retrieving product details that may not be available in an operational database. The Foundry Agent Service includes a File Search tool, which enables agents to retrieve information directly from uploaded files, such as user-supplied documents or product data, enabling a RAG-style search experience.</p> <p>In this lab, you'll learn how to enable the document search and upload the Tents Data Sheet to a vector store for the agent. Once activated, the tool allows the agent to search the file and deliver relevant responses. Documents can be uploaded to the agent for all users or linked to a specific user thread, or linked to the Code Interpreter.</p> <p>When the app starts, a vector store is created, the Contoso tents datasheet PDF file is uploaded to the vector store, and it is made available to the agent.</p> <p>Normally, you wouldn\u2019t create a new vector store and upload documents each time the app starts. Instead, you\u2019d create the vector store once, upload potentially thousands of documents, and connect the store to the agent.</p> <p>A vector store is a database optimized for storing and searching vectors (numeric representations of text data). The File Search tool uses the vector store for semantic search to search for relevant information in the uploaded document.</p>"},{"location":"lab-2-file_search/#lab-exercise","title":"Lab Exercise","text":"<ol> <li> <p>Open the shared/datasheet/contoso-tents-datasheet.pdf file from VS Code. The PDF file includes detailed product descriptions for the tents sold by Contoso.</p> </li> <li> <p>Review the file\u2019s contents to understand the information it contains, as this will be used to ground the agent\u2019s responses.</p> </li> </ol> PythonC# <ol> <li> <p>Open the file <code>main.py</code>.</p> </li> <li> <p>Uncomment the following lines by removing the \"# \" characters. </p> <pre><code># INSTRUCTIONS_FILE = \"instructions/file_search.txt\"\n\n# vector_store = await utilities.create_vector_store(\n#     agent_client,\n#     files=[TENTS_DATA_SHEET_FILE],\n#     vector_name_name=\"Contoso Product Information Vector Store\",\n# )\n# file_search_tool = FileSearchTool(vector_store_ids=[vector_store.id])\n# toolset.add(file_search_tool)\n</code></pre> <p>Warning</p> <p>The lines to be uncommented are not adjacent. When removing the # character, ensure you also delete the space that follows it.</p> </li> <li> <p>Review the code in the <code>main.py</code> file.</p> <p>After uncommenting, your code should look like this:</p> <pre><code>INSTRUCTIONS_FILE = \"instructions/function_calling.txt\"\nINSTRUCTIONS_FILE = \"instructions/file_search.txt\"\n# INSTRUCTIONS_FILE = \"instructions/code_interpreter.txt\"\n# INSTRUCTIONS_FILE = \"instructions/code_interpreter_multilingual.txt\"\n\n\n\nasync def add_agent_tools() -&gt; None:\n    \"\"\"Add tools for the agent.\"\"\"\n    font_file_info = None\n\n    # Add the functions tool\n    toolset.add(functions)\n\n    # Add the tents data sheet to a new vector data store\n    vector_store = await utilities.create_vector_store(\n        agents_client,\n        files=[TENTS_DATA_SHEET_FILE],\n        vector_store_name=\"Contoso Product Information Vector Store\",\n    )\n    file_search_tool = FileSearchTool(vector_store_ids=[vector_store.id])\n    toolset.add(file_search_tool)\n\n    # Add the code interpreter tool\n    # code_interpreter = CodeInterpreterTool()\n    # toolset.add(code_interpreter)\n\n    # Add multilingual support to the code interpreter\n    # font_file_info = await utilities.upload_file(agents_client, utilities.shared_files_path / FONTS_ZIP)\n    # code_interpreter.add_file(file_id=font_file_info.id)\n\n    return font_file_info\n</code></pre> </li> </ol> <ol> <li>Open the <code>Program.cs</code> file.</li> <li> <p>Update the creation of the lab to use the <code>Lab3</code> class.</p> <pre><code>await using Lab lab = new Lab2(projectClient, apiDeploymentName);\n</code></pre> </li> <li> <p>Review the <code>Lab3.cs</code> class to see how <code>InitialiseLabAsync</code> is used to add the PDF to a vector store and add the File Search tool to the agent, and <code>InitialiseToolResources</code> is used to add the File Search tool to the agent. These methods would be good places to add breakpoints to observe the process.</p> </li> </ol>"},{"location":"lab-2-file_search/#review-the-instructions","title":"Review the Instructions","text":"<ol> <li> <p>Review the create_vector_store function in the utilities.py file. The create_vector_store function uploads the Tents Data Sheet and saves it in a vector store.</p> <p>If you are comfortable using the VS Code debugger, then set a breakpoint in the create_vector_store function to observe how the vector store is created.</p> </li> <li> <p>Open the shared/instructions/file_search.txt file.</p> <p>Review the updates in the Tools section of the instructions file compared with the one we have used in the previous step.</p> </li> </ol>"},{"location":"lab-2-file_search/#run-the-agent-app","title":"Run the Agent App","text":"<ol> <li>Press F5 to run the app.</li> <li>In the terminal, the app starts, and the agent app will prompt you to Enter your query.</li> </ol>"},{"location":"lab-2-file_search/#start-a-conversation-with-the-agent","title":"Start a Conversation with the Agent","text":"<p>The following conversation uses data from both the Contoso sales database and the uploaded Tents Data Sheet, so the results will vary depending on the query.</p> <ol> <li> <p>What brands of tents do we sell?</p> <p>The agent responds with a list of distinct tent brands mentioned in the Tents Data Sheet.</p> <p>Info</p> <p>Observe how the agent's behavior changed with respect to the previous lab. The agent can now reference the provided data sheet to access details such as brand, description, product type, and category, and relate this data back to the Contoso sales database.</p> </li> <li> <p>What brands of hiking shoes do we sell?</p> <p>Info</p> <p>We haven't provided the agent with any files containing information about hiking shoes. Observe how the agent handles a question about information that it cannot retrieve from its vector store.</p> </li> <li> <p>What product type and categories are these brands associated with?</p> <p>The agent provides a list of product types and categories associated with the tent brands.</p> </li> <li> <p>What were the sales of tents in 2024 by product type? Include the brands associated with each.</p> <p>Info</p> <p>It's possible the agent might get this wrong, and suggest incorrectly that AlpineGear has a Family Camping tent. To address this, you could provide further context in the instructions or the datasheet, or provide context to the agent directly as in next prompt. For example, try the following: \"Contoso does not sell Family Camping tents from AlpineGear. Try again.\"</p> </li> <li> <p>What were the sales of AlpineGear in 2024 by region?</p> <p>The agent responds with sales data from the Contoso sales database.</p> <p>Info</p> <p>The agent interprets this as a request to find all sales of tents in the \"CAMPING &amp; HIKING' category, since it now has access to information that Alpine Gear is a brand of backpacking tent.</p> </li> <li> <p>Show sales by region as a pie chart</p> <p>Our agent can't create charts ... yet. We'll fix that in the next lab.</p> </li> </ol>"},{"location":"lab-2-file_search/#stop-the-agent-app","title":"Stop the Agent App","text":"<p>When you're done, type exit to clean up the agent resources and stop the app.</p>"},{"location":"lab-3-code_interpreter/","title":"Lab 3 Intro to the Code Interpreter","text":""},{"location":"lab-3-code_interpreter/#introduction","title":"Introduction","text":"<p>The Foundry Agent Service Code Interpreter enables the LLM to safely execute Python code for tasks such as creating charts or performing complex data analyses based on user queries. It makes use of natural language processing (NLP), sales data from an SQLite database, and user prompts to automate code generation. The LLM-generated Python code executes within a secure sandbox environment, running on a restricted subset of Python to ensure safe and controlled execution.</p>"},{"location":"lab-3-code_interpreter/#lab-exercise-python","title":"Lab Exercise - Python","text":"<p>In this lab, you'll enable the Code Interpreter to execute Python code generated by the LLM.</p> PythonC# <ol> <li> <p>Open the <code>main.py</code>.</p> </li> <li> <p>Define a new instructions file for our agent and add the code intepreter in the agent's toolset. Uncomment the following lines by removing the \"# \" characters.</p> <pre><code># INSTRUCTIONS_FILE = \"instructions/code_interpreter.txt\n\n# code_interpreter = CodeInterpreterTool()\n# toolset.add(code_interpreter)\n</code></pre> <p>Warning</p> <p>The lines to be uncommented are not adjacent. When removing the # character, ensure you also delete the space that follows it.</p> </li> <li> <p>Review the code in the <code>main.py</code> file.</p> <p>After uncommenting, your code should look like this:</p> <pre><code>INSTRUCTIONS_FILE = \"instructions/function_calling.txt\"\nINSTRUCTIONS_FILE = \"instructions/file_search.txt\"\nINSTRUCTIONS_FILE = \"instructions/code_interpreter.txt\"\n# INSTRUCTIONS_FILE = \"instructions/code_interpreter_multilingual.txt\"\n\n\n\nasync def add_agent_tools() -&gt; None:\n    \"\"\"Add tools for the agent.\"\"\"\n    font_file_info = None\n\n    # Add the functions tool\n    toolset.add(functions)\n\n    # Add the tents data sheet to a new vector data store\n    vector_store = await utilities.create_vector_store(\n        agents_client,\n        files=[TENTS_DATA_SHEET_FILE],\n        vector_store_name=\"Contoso Product Information Vector Store\",\n    )\n    file_search_tool = FileSearchTool(vector_store_ids=[vector_store.id])\n    toolset.add(file_search_tool)\n\n    # Add the code interpreter tool\n    code_interpreter = CodeInterpreterTool()\n    toolset.add(code_interpreter)\n\n    # Add multilingual support to the code interpreter\n    # font_file_info = await utilities.upload_file(agents_client, utilities.shared_files_path / FONTS_ZIP)\n    # code_interpreter.add_file(file_id=font_file_info.id)\n\n    return font_file_info\n</code></pre> </li> </ol> <ol> <li> <p>Open the <code>Program.cs</code> file.</p> </li> <li> <p>Update the creation of the lab to use the <code>Lab2</code> class.</p> <pre><code>await using Lab lab = new Lab3(projectClient, apiDeploymentName);\n</code></pre> </li> <li> <p>Review the <code>Lab2.cs</code> class to see how the Code Interpreter is added to the Tools list.</p> </li> </ol>"},{"location":"lab-3-code_interpreter/#review-the-instructions","title":"Review the Instructions","text":"<ol> <li>Open the shared/instructions/code_interpreter.txt file. This file replaces the instructions used in the previous lab.</li> <li> <p>The Tools section now includes a \u201cVisualization and Code Interpretation\u201d capability, allowing the agent to:</p> <ul> <li>Use the code interpreter to run LLM generated Python code. (e.g., for downloading or visualizing data).</li> <li>Create charts and graphs, using the user\u2019s language for labels, titles, and other chart text.</li> <li>Export visualizations as PNG files and data as CSV files.</li> </ul> </li> </ol>"},{"location":"lab-3-code_interpreter/#run-the-agent-app","title":"Run the Agent App","text":"<ol> <li>Press F5 to run the app.</li> <li>In the terminal, the app will start, and the agent app will prompt you to  Enter your query.</li> </ol>"},{"location":"lab-3-code_interpreter/#start-a-conversation-with-the-agent","title":"Start a Conversation with the Agent","text":"<p>Try these questions:</p> <ol> <li> <p>Show sales by region as a pie chart</p> <p>Once the task is complete, the file will be saved in the shared/files subfolder. Note that this subfolder is created the first time this task is run, and is never checked into source control.</p> <p>Open the folder in VS Code and click on the file to view it. (Tip: in Codespaces, you can Control-Click the link that the agent outputs in its response to view the file.)</p> <p>Info</p> <p>This might feel like magic, so what\u2019s happening behind the scenes to make it all work?</p> <p>Foundry Agent Service orchestrates the following steps:</p> <ol> <li> <p>The LLM generates a SQL query to answer the user's question. In this example, the query is:</p> <p>SELECT region, SUM(revenue) AS total_revenue FROM sales_data GROUP BY region;</p> </li> <li> <p>The LLM asks the agent app to call the async_fetch_sales_data_using_sqlite_query function. The SQL command is executed, and the resulting data is returned to the LLM.</p> </li> <li>Using the returned data, the LLM writes Python code to create a Pie Chart.</li> <li>Finally, the Code Interpreter executes the Python code to generate the chart.</li> </ol> </li> <li> <p>Download as CSV file</p> <p>Once the task is complete, check the shared/files folder to see the downloaded file.</p> <p>Info</p> <p>The agent inferred from the conversation which file you wanted to create, even though you didn't explicitly specify it.</p> </li> <li> <p>Continue asking questions about Contoso sales data to see the Code Interpreter in action. Few examples:</p> <ul> <li>What would be the impact of a shock event (e.g., 20% sales drop in one region) on global sales distribution? Show as a Grouped Bar Chart.<ul> <li>Follow up with What if the shock event was 50%?</li> </ul> </li> <li>Which regions have sales above or below the average? Show as a Bar Chart with Deviation from Average.</li> <li>Which regions have discounts above or below the average? Show as a Bar Chart with Deviation from Average.</li> <li>Simulate future sales by region using a Monte Carlo simulation to estimate confidence intervals. Show as a Line with Confidence Bands using vivid colors.</li> </ul> </li> </ol>"},{"location":"lab-3-code_interpreter/#debugging-the-code-interpreter","title":"Debugging the Code Interpreter","text":"<p>You can\u2019t directly debug the Code Interpreter, but you can gain insight into its behavior by asking the agent to display the code it generates. This helps you understand how it interprets your instructions and can guide you in refining them.</p> <p>From the terminal, type:</p> <ol> <li>show code to see the code generated by the Code Interpreter for the last operation.</li> </ol>"},{"location":"lab-3-code_interpreter/#stop-the-agent-app","title":"Stop the Agent App","text":"<p>When you're done, type exit to clean up the agent resources and stop the app.</p>"},{"location":"lab-4-bing_search/","title":"Lab 4 bing search","text":""},{"location":"lab-4-bing_search/#introduction","title":"Introduction","text":"<p>Grounding conversations with Bing is one of several tools provided by the Foundry Agent Service. Grounding with Bing allows your app to search for information relevant to the conversation and that cannot be provided in advance to the agent in a vector store or SQL db. For example, you might want to search for competitive product information.</p> @Skillable WorkshopSelf-Guided Learners"},{"location":"lab-4-bing_search/#grounding-with-bing-search","title":"Grounding with Bing Search","text":"<p>This lab requires the Grounding with Bing Search service. Follow the lab instructions to create the resource and connect it to the given Azure AI project. , </p>"},{"location":"lab-4-bing_search/#lab-exercise","title":"Lab Exercise","text":"<p>In this lab, you'll enable Bing Grounding to provide competitive sales analysis of Contoso products and categories.</p>"},{"location":"lab-4-bing_search/#create-a-grounding-with-bing-search-resource","title":"Create a Grounding with Bing Search resource","text":"<p>Follow these steps to create a Grounding with Bing Search Resource:</p> <ol> <li> <p>Click to create a Grounding with Bing Search Resource.</p> <p>Warning</p> <p>You may need to sign in to Azure and/or clear the welcome screen to access the Azure portal. Always use the Azure credentials provided in the Resources tab of the lab instructions.</p> </li> <li> <p>Select Create.</p> </li> <li>Select the rg-agent-workshop-**** resource group from the drop-down list.</li> <li> <p>Name the resource as follows:</p> <pre><code>groundingwithbingsearch\n</code></pre> </li> <li> <p>Select the Grounding with Bing Search pricing tier.</p> </li> <li>Confirm I confirm I have read and understood the notice above.</li> <li>Select Review + create.</li> <li>Select Create.</li> <li>Wait for deployment to complete, then click Go to resource.</li> <li>Click on the resource you just created.</li> <li>Select Overview from the sidebar menu.</li> <li>Select the Go to Azure AI Foundry Portal button. </li> </ol>"},{"location":"lab-4-bing_search/#create-a-bing-search-connection-in-ai-foundry","title":"Create a Bing Search Connection in AI Foundry","text":"<p>Next, we will create a Bing Search connection in the Azure AI Foundry portal. This connection enables the agent app to access the Bing Search service using the agent Grounding-with-Bing-Search.</p> <p>To create a Bing Search connection in the Azure AI Foundry portal, follow these steps:</p> <ol> <li>Verify that your Foundry project-**** is selected.</li> <li>From the sidebar menu, click the Management Center button. The button is pinned at the bottom of the sidebar.</li> <li>From the sidebar menu, select Connected resources.</li> <li>Click + New connection.</li> <li>Scroll to the Knowledge section and select Grounding with Bing Search.</li> <li>Click the Add connection button to the right of your <code>groundingwithbingsearch</code> resource.</li> <li>Click Close</li> <li>Verify that the new API Key connection is listed among the connected resources (you might need to Refresh to view changes).</li> </ol> <p>For more information, visit the Grounding with Bing Search documentation.</p>"},{"location":"lab-4-bing_search/#enable-grounding-with-bing-search-in-the-agent-app","title":"Enable Grounding with Bing Search in the Agent App","text":"PythonC# <ol> <li> <p>Open the file <code>main.py</code>.</p> </li> <li> <p>Uncomment the following lines by removing the \"# \" characters</p> <pre><code># bing_grounding = BingGroundingTool(connection_id=AZURE_BING_CONNECTION_ID)\n# toolset.add(bing_grounding)\n</code></pre> <p>Warning</p> <p>The lines to be uncommented are not adjacent. When removing the # character, ensure you also delete the space that follows it.</p> </li> <li> <p>Review the code in the <code>main.py</code> file.</p> <p>After uncommenting, your code should look like this:</p> <pre><code>INSTRUCTIONS_FILE = \"instructions/function_calling.txt\"\nINSTRUCTIONS_FILE = \"instructions/file_search.txt\"\nINSTRUCTIONS_FILE = \"instructions/code_interpreter.txt\"\nINSTRUCTIONS_FILE = \"instructions/bing_grounding.txt\"\n# INSTRUCTIONS_FILE = \"instructions/code_interpreter_multilingual.txt\"\n\n\nasync def add_agent_tools() -&gt; None:\n    \"\"\"Add tools for the agent.\"\"\"\n    font_file_info = None\n\n    # Add the functions tool\n    toolset.add(functions)\n\n    # Add the tents data sheet to a new vector data store\n    vector_store = await utilities.create_vector_store(\n        agents_client,\n        files=[TENTS_DATA_SHEET_FILE],\n        vector_store_name=\"Contoso Product Information Vector Store\",\n    )\n    file_search_tool = FileSearchTool(vector_store_ids=[vector_store.id])\n    toolset.add(file_search_tool)\n\n    # Add the code interpreter tool\n    code_interpreter = CodeInterpreterTool()\n    toolset.add(code_interpreter)\n\n    # Add the Bing grounding tool\n    bing_grounding = BingGroundingTool(connection_id=AZURE_BING_CONNECTION_ID)\n    toolset.add(bing_grounding)\n    # Add multilingual support to the code interpreter\n    # font_file_info = await utilities.upload_file(agents_client, utilities.shared_files_path / FONTS_ZIP)\n    # code_interpreter.add_file(file_id=font_file_info.id)\n\n    return font_file_info\n</code></pre> </li> </ol> <ol> <li>Open the <code>Program.cs</code> file.</li> <li> <p>Update the creation of the lab to use the <code>Lab4</code> class.</p> <pre><code>await using Lab lab = new Lab4(projectClient, apiDeploymentName, builder.Configuration);\n</code></pre> </li> <li> <p>Review the <code>Lab4.cs</code> class to see how <code>InitialiseLabTools</code> is used to add the Bing Grounding tool to the agent.</p> </li> </ol>"},{"location":"lab-4-bing_search/#review-the-instructions","title":"Review the Instructions","text":"<ol> <li>Open the shared/instructions/bing_grounding.txt file. This file replaces the instructions used in the previous lab.</li> <li> <p>The Tools section now includes a \u201cCompetitive Insights for Products and Categories\u201d capability, enabling the agent to:</p> <ul> <li>Use Bing Search to gather competitor product names, company names, and prices.</li> <li>Restrict responses to topics related to outdoor camping and sports gear.</li> <li>Ensure search results are concise and directly relevant to the query.</li> </ul> </li> </ol>"},{"location":"lab-4-bing_search/#run-the-agent-app","title":"Run the Agent App","text":"<p>First, launch the app from the terminal as before:</p> <ol> <li>Press F5 to run the app.</li> </ol>"},{"location":"lab-4-bing_search/#start-a-conversation-with-the-agent","title":"Start a Conversation with the Agent","text":"<p>The agent combines data from the Contoso sales database, the Tents Data Sheet, and Bing Search to provide comprehensive responses, so the results will vary depending on the query.</p> <ol> <li> <p>What beginner tents do we sell?</p> <p>Info</p> <p>This information mainly comes from the file we provided in the vector information store.</p> </li> <li> <p>What beginner tents do our competitors sell? Include prices.</p> <p>Info</p> <p>This information comes from the internet, and includes real-world product names and prices.</p> </li> <li> <p>Show as a bar chart</p> <p>Info</p> <p>AI Agent Service is again using Code Interpreter to create the chart, but this time with real-world data sourced in the previous query. As before, look in <code>shared/files</code> to view the chart.</p> </li> <li> <p>Show the tents we sell by region that are a similar price to our competitors beginner tents.</p> <p>Info</p> <p>This query relies on the reasoning capabilities of the underlying large language model, along with the data returned by function calling.</p> </li> <li> <p>Download the data as a human-readable JSON file</p> <p>Info</p> <p>This query again relies on Code Interpreter to create the file from the context in the previous queries.</p> </li> </ol>"},{"location":"lab-4-bing_search/#stop-the-agent-app","title":"Stop the Agent App","text":"<ol> <li>Type save to save the agent app state. This stops the agent app without deleting its state, allowing you to explore the agent in the Azure AI Foundry\u2019s Agents playground.</li> <li>Press Shift+F5 to stop debugging the agent app.</li> <li> <p>Copy the Agent ID from the terminal output. The Agent ID is required to explore the agent in the Azure AI Foundry portal. The Agent ID will look similar to this example:</p> <pre><code>Agent ID: asst_pskNeFYuoCPogDnmfaqIUwoU\n</code></pre> </li> </ol>"},{"location":"lab-4-bing_search/#explore-the-agent-in-azure-ai-foundry","title":"Explore the Agent in Azure AI Foundry","text":"<p>The Azure AI Foundry includes a playground that lets you interact with the agent app and test how it responds to various queries. Keep in mind that this playground is not a full chatbot experience\u2014it\u2019s a testing tool. Also, you won\u2019t have real-time access to the Contoso sales database, as that resource is available only locally.</p> <ol> <li>From your browser, navigate to the Azure AI Foundry portal.</li> <li>Select Playgrounds from the left-hand navigation.</li> <li>Select Try the Agents playground.</li> <li>Select the recommended Azure OpenAI Service resource from the dropdown menu - which is the one connected to your project. Click on Let's go.</li> <li>Verify that the Agent ID you copied earlier is the same you see into the Agent id field.</li> </ol>"},{"location":"lab-4-bing_search/#review-the-agents-instructions","title":"Review the Agent's Instructions","text":"<p>You'll recognize the instructions from the <code>instructions_bing_grounding.txt</code> file. These instructions are used to guide the agent in responding to queries.</p>"},{"location":"lab-4-bing_search/#start-a-conversation-with-the-agent-in-the-playground","title":"Start a Conversation with the Agent in the Playground","text":"<p>Use the playground to test different queries and observe how the agent responds. You can reuse the same queries from the terminal or try new ones. Keep in mind that the agent pulls information from the Tents Data Sheet and Bing Search, but unlike the local app version, it does not have access to the Contoso sales database.</p> <p></p>"},{"location":"lab-4-bing_search/#grounding-with-bing-search_1","title":"Grounding with Bing Search","text":"<p>This lab requires the Grounding with Bing Search service, which may not be available in your Azure subscription. To check if you have access, follow the lab instructions to create the resource, if you don\u2019t have access, an error message will appear. Even if you\u2019re unable to use the service, be sure to read through the lab to understand how Grounding with Bing Search works.</p>"},{"location":"lab-4-bing_search/#lab-exercise_1","title":"Lab Exercise","text":"<p>In this lab, you'll enable Bing Grounding to provide competitive sales analysis of Contoso products and categories.</p>"},{"location":"lab-4-bing_search/#create-a-grounding-with-bing-search-resource_1","title":"Create a Grounding with Bing Search resource","text":"<p>You'll need to create a Grounding with Bing Search Service resource in the Azure portal and connect it to the Azure AI Foundry portal.</p> <p>Follow these steps to create a Grounding with Bing Search Resource:</p> <ol> <li> <p>Click to create a Grounding with Bing Search Resource.</p> <p>Warning</p> <p>You may need to sign in to your Azure account and or clear the welcome screen to access the Azure portal.</p> </li> <li> <p>Select Create.</p> </li> <li>Select the rg-agent-workshop-**** resource group from the drop-down list.</li> <li> <p>Name the resource as follows:</p> <pre><code>groundingwithbingsearch\n</code></pre> </li> <li> <p>Select the Grounding with Bing Search pricing tier.</p> </li> <li>Confirm I confirm I have read and understood the notice above.</li> <li>Select Review + create.</li> <li>Select Create.</li> <li>Wait for deployment to complete, then click Go to resource.</li> <li>Select Overview from the sidebar menu.</li> <li>Select the Go to Azure AI Foundry Portal button. </li> </ol>"},{"location":"lab-4-bing_search/#create-a-bing-search-connection-in-ai-foundry_1","title":"Create a Bing Search Connection in AI Foundry","text":"<p>Next, we will create a Bing Search connection in the Azure AI Foundry portal. This connection enables the agent app to access the Bing Search service using the agent Grounding-with-Bing-Search.</p> <p>To create a Bing Search connection in the Azure AI Foundry portal, follow these steps:</p> <ol> <li>Verify that your Foundry project-**** is selected.</li> <li>From the sidebar menu, click the Management Center button. The button is pinned at the bottom of the sidebar.</li> <li>From the sidebar menu, select Connected resources.</li> <li>Click + New connection.</li> <li>Scroll to the Knowledge section and select Grounding with Bing Search.</li> <li>Click the Add connection button to the right of your <code>groundingwithbingsearch</code> resource.</li> <li>Click Close</li> </ol> <p>For more information, visit the Grounding with Bing Search documentation.</p>"},{"location":"lab-4-bing_search/#enable-grounding-with-bing-search-in-the-agent-app_1","title":"Enable Grounding with Bing Search in the Agent App","text":"<ol> <li> <p>Open the file <code>main.py</code>.</p> </li> <li> <p>Uncomment the following lines by removing the \"# \" characters</p> <pre><code># bing_grounding = BingGroundingTool(connection_id=AZURE_BING_CONNECTION_ID)\n# toolset.add(bing_grounding)\n</code></pre> <p>Warning</p> <p>The lines to be uncommented are not adjacent. When removing the # character, ensure you also delete the space that follows it.</p> </li> <li> <p>Review the code in the <code>main.py</code> file.</p> <p>After uncommenting, your code should look like this:</p> <pre><code>INSTRUCTIONS_FILE = \"instructions/function_calling.txt\"\nINSTRUCTIONS_FILE = \"instructions/file_search.txt\"\nINSTRUCTIONS_FILE = \"instructions/code_interpreter.txt\"\nINSTRUCTIONS_FILE = \"instructions/bing_grounding.txt\"\n# INSTRUCTIONS_FILE = \"instructions/code_interpreter_multilingual.txt\"\n\n\nasync def add_agent_tools() -&gt; None:\n    \"\"\"Add tools for the agent.\"\"\"\n    font_file_info = None\n\n    # Add the functions tool\n    toolset.add(functions)\n\n    # Add the tents data sheet to a new vector data store\n    vector_store = await utilities.create_vector_store(\n        agents_client,\n        files=[TENTS_DATA_SHEET_FILE],\n        vector_store_name=\"Contoso Product Information Vector Store\",\n    )\n    file_search_tool = FileSearchTool(vector_store_ids=[vector_store.id])\n    toolset.add(file_search_tool)\n\n    # Add the code interpreter tool\n    code_interpreter = CodeInterpreterTool()\n    toolset.add(code_interpreter)\n\n    # Add the Bing grounding tool\n    bing_grounding = BingGroundingTool(connection_id=AZURE_BING_CONNECTION_ID)\n    toolset.add(bing_grounding)\n\n    # Add multilingual support to the code interpreter\n    # font_file_info = await utilities.upload_file(agents_client, utilities.shared_files_path / FONTS_ZIP)\n    # code_interpreter.add_file(file_id=font_file_info.id)\n\n    return font_file_info\n</code></pre> </li> </ol>"},{"location":"lab-4-bing_search/#review-the-instructions_1","title":"Review the Instructions","text":"<ol> <li>Open the shared/instructions/bing_grounding.txt file. This file replaces the instructions used in the previous lab.</li> <li> <p>The Tools section now includes a \u201cCompetitive Insights for Products and Categories\u201d capability, enabling the agent to:</p> <ul> <li>Use Bing Search to gather competitor product names, company names, and prices.</li> <li>Restrict responses to topics related to outdoor camping and sports gear.</li> <li>Ensure search results are concise and directly relevant to the query.</li> </ul> </li> </ol>"},{"location":"lab-4-bing_search/#run-the-agent-app_1","title":"Run the Agent App","text":"<p>First, launch the app from the terminal as before:</p> <ol> <li>Press F5 to run the app.</li> </ol>"},{"location":"lab-4-bing_search/#start-a-conversation-with-the-agent_1","title":"Start a Conversation with the Agent","text":"<p>The agent combines data from the Contoso sales database, the Tents Data Sheet, and Bing Search to provide comprehensive responses, so the results will vary depending on the query.</p> <ol> <li> <p>What beginner tents do we sell?</p> <p>Info</p> <p>This information mainly comes from the file we provided in the vector information store.</p> </li> <li> <p>What beginner tents do our competitors sell? Include prices.</p> <p>Info</p> <p>This information comes from the internet, and includes real-world product names and prices.</p> </li> <li> <p>Show as a bar chart</p> <p>Info</p> <p>AI Agent Service is again using Code Interpreter to create the chart, but this time with real-world data sourced in the previous query. As before, look in <code>shared/files</code> to view the chart.</p> </li> <li> <p>Show the tents we sell by region that are a similar price to our competitors beginner tents.</p> <p>Info</p> <p>This query relies on the reasoning capabilities of the underlying large language model, along with the data returned by function calling.</p> </li> <li> <p>Download the data as a human-readable JSON file</p> <p>Info</p> <p>This query again relies on Code Interpreter to create the file from the context in the previous queries.</p> </li> </ol>"},{"location":"lab-4-bing_search/#stop-the-agent-app_1","title":"Stop the Agent App","text":"<ol> <li>Type save to save the agent app state. This stops the agent app without deleting its state, allowing you to explore the agent in the Azure AI Foundry\u2019s Agents playground.</li> <li>Press Shift+F5 to stop debugging the agent app.</li> <li> <p>Copy the Agent ID from the terminal output. The Agent ID is required to explore the agent in the Azure AI Foundry portal. The Agent ID will look similar to this example:</p> <pre><code>Agent ID: asst_pskNeFYuoCPogDnmfaqIUwoU\n</code></pre> </li> </ol>"},{"location":"lab-4-bing_search/#explore-the-agent-in-azure-ai-foundry_1","title":"Explore the Agent in Azure AI Foundry","text":"<p>The Azure AI Foundry includes a playground that lets you interact with the agent app and test how it responds to various queries. Keep in mind that this playground is not a full chatbot experience\u2014it\u2019s a testing tool. Also, you won\u2019t have real-time access to the Contoso sales database, as that resource is available only locally.</p> <ol> <li>From your browser, navigate to the Azure AI Foundry portal.</li> <li>Select Playgrounds from the left-hand navigation.</li> <li>Select Try the Agents playground.</li> <li>Paste the Agent ID you copied earlier into the Agent id field.</li> </ol>"},{"location":"lab-4-bing_search/#review-the-agents-instructions_1","title":"Review the Agent's Instructions","text":"<p>You'll recognize the instructions from the <code>instructions_bing_grounding.txt</code> file. These instructions are used to guide the agent in responding to queries.</p>"},{"location":"lab-4-bing_search/#start-a-conversation-with-the-agent-in-the-playground_1","title":"Start a Conversation with the Agent in the Playground","text":"<p>Use the playground to test different queries and observe how the agent responds. You can reuse the same queries from the terminal or try new ones. Keep in mind that the agent pulls information from the Tents Data Sheet and Bing Search, but unlike the local app version, it does not have access to the Contoso sales database.</p> <p></p>"},{"location":"lab-5-multilingual/","title":"Lab 4 Multilingual Visualizations","text":""},{"location":"lab-5-multilingual/#introduction","title":"Introduction","text":"<p>In the Grounding with Documents lab, we uploaded a PDF file to provide context for conversations. Now, we\u2019ll enhance the Code Interpreter by uploading a ZIP file with fonts for multilingual visualizations\u2014just one example of how file uploads can extend its functionality.</p> <p>Note</p> <p>The Code Interpreter includes a default set of Latin-based fonts. Since the Code Interpreter runs in a sandboxed Python environment, it can\u2019t download fonts directly from the internet.</p>"},{"location":"lab-5-multilingual/#lab-exercise","title":"Lab Exercise","text":"<p>Earlier labs didn\u2019t include multilingual support because uploading the required font ZIP file and linking it to the Code Interpreter is time-consuming. In this lab, we\u2019ll enable multilingual support by uploading the necessary fonts. You\u2019ll also learn some tips on how to guide the Code Interpreter using extended instructions.</p>"},{"location":"lab-5-multilingual/#rerun-the-previous-lab","title":"Rerun the previous lab","text":"<p>First, we're going to rerun the previous lab so we can see how the Code Interpreter supports multilingual text.</p> <ol> <li>Start the agent app by pressing F5.</li> <li>In the terminal, the app will start, and the agent app will prompt you to  Enter your query.</li> <li> <p>Try these questions:</p> <ol> <li>What were the sales by region for 2022</li> <li>In Korean</li> <li>Show as a pie chart</li> </ol> </li> </ol> <p>Once the task is complete, the pie chart image will be saved in the shared/files subfolder. Review the visualization, and you'll see that the text is not rendered correctly. This is because the Code Interpreter doesn't have the necessary fonts to render non-Latin characters.</p> <p></p> <ol> <li>When you're done, type exit to clean up the agent resources and stop the app.</li> </ol>"},{"location":"lab-5-multilingual/#add-multilingual-font-support","title":"Add Multilingual Font Support","text":"PythonC# <ol> <li> <p>Open the <code>main.py</code>.</p> </li> <li> <p>Define a new instructions file for our agent: uncomment the following lines by removing the \"# \" characters</p> <pre><code>INSTRUCTIONS_FILE = \"instructions/code_interpreter_multilingual.txt\"\n\nfont_file_info = await utilities.upload_file(agent_client, utilities.shared_files_path / FONTS_ZIP)\ncode_interpreter.add_file(file_id=font_file_info.id)\n</code></pre> <p>Warning</p> <p>The lines to be uncommented are not adjacent. When removing the # character, ensure you also delete the space that follows it.</p> </li> <li> <p>Review the code in the <code>main.py</code> file.</p> <p>After uncommenting, your code should look like this:</p> <pre><code>INSTRUCTIONS_FILE = \"instructions/function_calling.txt\"\nINSTRUCTIONS_FILE = \"instructions/file_search.txt\"\nINSTRUCTIONS_FILE = \"instructions/code_interpreter.txt\"\nINSTRUCTIONS_FILE = \"instructions/code_interpreter_multilingual.txt\"\n\n\nasync def add_agent_tools() -&gt; None:\n    \"\"\"Add tools for the agent.\"\"\"\n    font_file_info = None\n\n    # Add the functions tool\n    toolset.add(functions)\n\n    # Add the tents data sheet to a new vector data store\n    vector_store = await utilities.create_vector_store(\n        agents_client,\n        files=[TENTS_DATA_SHEET_FILE],\n        vector_store_name=\"Contoso Product Information Vector Store\",\n    )\n    file_search_tool = FileSearchTool(vector_store_ids=[vector_store.id])\n    toolset.add(file_search_tool)\n\n    # Add the code interpreter tool\n    code_interpreter = CodeInterpreterTool()\n    toolset.add(code_interpreter)\n\n    # Add multilingual support to the code interpreter\n    font_file_info = await utilities.upload_file(agents_client, utilities.shared_files_path / FONTS_ZIP)\n    code_interpreter.add_file(file_id=font_file_info.id)\n\n    return font_file_info\n</code></pre> </li> </ol> <ol> <li> <p>Open the <code>Program.cs</code> file.</p> </li> <li> <p>Update the creation of the lab to use the <code>Lab5</code> class.</p> <pre><code>await using Lab lab = new Lab5(projectClient, apiDeploymentName);\n</code></pre> </li> <li> <p>Review the <code>Lab5.cs</code> class to see how the Code Interpreter is added to the Tools list.</p> </li> </ol>"},{"location":"lab-5-multilingual/#review-the-instructions","title":"Review the Instructions","text":"<ol> <li>Open the shared/instructions/code_interpreter_multilingual.txt file. This file replaces the instructions used in the previous lab.</li> <li> <p>The Tools section now includes an extended \u201cVisualization and Code Interpretation\u201d section describing how to create visualizations and handle non-Latin languages.</p> <p>The following is a summary of the instructions given to the Code Interpreter:</p> <ul> <li>Font Setup for Non-Latin Scripts (e.g., Arabic, Japanese, Korean, Hindi):<ul> <li>On first run, verify if the <code>/mnt/data/fonts</code> folder exists. If missing, unzip the font file into this folder.</li> </ul> </li> <li> <p>Available Fonts:</p> <ul> <li>Arabic: <code>CairoRegular.ttf</code></li> <li>Hindi: <code>NotoSansDevanagariRegular.ttf</code></li> <li>Korean: <code>NanumGothicRegular.ttf</code></li> <li>Japanese: <code>NotoSansJPRegular.ttf</code></li> </ul> </li> <li> <p>Font Usage:</p> <ul> <li>Load the font with <code>matplotlib.font_manager.FontProperties</code> using the correct path.</li> <li>Apply the font to:<ul> <li><code>plt.title()</code> using the <code>fontproperties</code> parameter.</li> <li>All labels and text using <code>textprops={'fontproperties': font_prop}</code> in functions like <code>plt.pie()</code> or <code>plt.bar_label()</code>.</li> </ul> </li> <li>Ensure all text (labels, titles, legends) is properly encoded, without boxes or question marks.</li> </ul> </li> <li> <p>Visualization Text:</p> <ul> <li>Always translate the data to the requested or inferred language (e.g., Chinese, French, English).</li> <li>Use the appropriate font from <code>/mnt/data/fonts/fonts</code> for all chart text (e.g., titles, labels).</li> </ul> </li> </ul> </li> </ol>"},{"location":"lab-5-multilingual/#run-the-agent-app","title":"Run the Agent App","text":"<ol> <li>Press F5 to run the app.</li> <li>In the terminal, the app will start, and the agent app will prompt you to  Enter your query.</li> </ol>"},{"location":"lab-5-multilingual/#start-a-conversation-with-the-agent","title":"Start a Conversation with the Agent","text":"<p>Try these questions:</p> <ol> <li>What were the sales by region for 2022</li> <li>In Korean</li> <li> <p>Show as a pie chart</p> <p>Once the task is complete, the pie chart image will be saved in the shared/files subfolder.</p> <p></p> </li> </ol>"},{"location":"lab-5-multilingual/#debugging-the-code-interpreter","title":"Debugging the Code Interpreter","text":"<p>You can\u2019t directly debug the Code Interpreter, but you can gain insight into its behavior by asking the agent to display the code it generates. This helps you understand how it interprets your instructions and can guide you in refining them.</p> <p>From the terminal, type:</p> <ol> <li>show code to see the code generated by the Code Interpreter for the last visualization.</li> <li>list files mounted at /mnt/data to see the files uploaded to the Code Interpreter.</li> </ol>"},{"location":"lab-5-multilingual/#restricting-code-interpreter-output","title":"Restricting Code Interpreter Output","text":"<p>In a production environment, you likely don\u2019t want end users to see the code generated by the Code Interpreter or access uploaded or created files. To prevent this, add instructions to restrict the Code Interpreter from displaying code or listing files.</p> <p>For example, you can insert the following instructions at the beginning of the <code>2. Visualization and Code Interpretation</code> section in the <code>code_interpreter_multilingual.txt</code> file.</p> <pre><code>- Never show the code you generate to the user.\n- Never list the files mounted at /mnt/data.\n</code></pre>"},{"location":"lab-5-multilingual/#stop-the-agent-app","title":"Stop the Agent App","text":"<p>When you're done, type exit to clean up the agent resources and stop the app.</p>"},{"location":"resources/","title":"Resources","text":""},{"location":"resources/#workshop-repository-and-documentation","title":"Workshop Repository and Documentation","text":"<p>The workshop repository on GitHub contains everything needed for the workshop. The repo includes the source code (src folder) for the sample application, the documentation (docs) built with MkDocs, and the Azure deployment resources (infra) for the workshop.</p> <ul> <li>Repository: microsoft/build-your-first-agent-with-azure-ai-agent-service-workshop</li> </ul>"},{"location":"resources/#microsoft-learn-resources","title":"Microsoft Learn resources","text":"<ul> <li>Documentation: Foundry Agent Service</li> <li>Module: Fundamentals of AI agents on Azure</li> <li>Documentation: Tracing using Application Insights, Evaluating your AI agents with Azure AI Evaluation SDK</li> </ul>"},{"location":"resources/#contoso-sales-assistant-sample","title":"Contoso Sales Assistant sample","text":"<p>This end-to-end demo web agent showcases the capabilities of the Foundry Agent Service. It uses the Chainlit conversational UI framework to provide a web-based chat interface. The assistant is built to help users analyze sales data and answer questions related to it.</p> <ul> <li>Contoso Sales Assistant App docs (Chainlit)</li> <li>Contoso Sales Assistant App repo</li> </ul>"},{"location":"resources/#thank-you","title":"Thank you","text":"<p>Thank you for participating in this workshop! If you have any suggestions for improvements or encountered any problems while running this workshop, please let us know via GitHub Issues.</p>"},{"location":"security/","title":"Security Concerns","text":"<p>This workshop application is designed for education and adaptation, and is not intended for production use out-of-the-box. Nonetheless, it does demonstrate some best practices for security.</p>"},{"location":"security/#malicious-sql-attacks","title":"Malicious SQL Attacks","text":"<p>A common concern with SQL dynamically generated by LLMs is security, particularly the risk of SQL injection or malicious actions, such as dropping or tampering with the database. While these concerns are valid, they can be effectively mitigated by properly configuring database access permissions.</p> <p>This app uses a SQLite database configured as read-only. For database services like PostgreSQL or Azure SQL, the app should be assigned a read-only (SELECT) role. Running the app in a secure environment further enhances protection.</p> <p>In enterprise scenarios, data is typically extracted and transformed from operational systems into a read-only database or data warehouse with a user-friendly schema. This approach ensures that the data is secure, optimized for performance and accessibility, and that the app has restricted, read-only access.</p>"},{"location":"security/#sandboxing","title":"Sandboxing","text":"<p>This uses the Azure AI Agents Service Code Interpreter to create and run code on demand. The code runs in a sandboxed execution environment to prevent the code taking actions that are beyond the scope of the agent.</p>"},{"location":"summary/","title":"Summary","text":"<p>This workshop demonstrated how to leverage the Foundry Agent Service to create a robust conversational agent capable of answering sales-related questions, performing data analysis, generating visualizations, and integrating external data sources for enhanced insights. Here are the key takeaways:</p>"},{"location":"summary/#1-function-calling-and-dynamic-sql-queries","title":"1. Function Calling and Dynamic SQL Queries","text":"<ul> <li>The agent uses the Foundry Agent Service to dynamically generate and execute SQL queries against a read-only SQLite database, enabling it to respond to user questions with accurate data retrieval.</li> </ul>"},{"location":"summary/#2-context-management","title":"2. Context Management","text":"<ul> <li>The agent efficiently manages conversation context using the Foundry Agent Service, ensuring interactions remain relevant and coherent.</li> </ul>"},{"location":"summary/#3-data-visualization","title":"3. Data Visualization","text":"<ul> <li>With the Code Interpreter, the agent can generate visualizations such as pie charts and tables based on user queries, making data more accessible and actionable. You can attach additional fonts to the Code Interpreter to create visualizations that support multiple languages.</li> </ul>"},{"location":"summary/#4-file-generation","title":"4. File Generation","text":"<ul> <li>The agent can create downloadable files, including Excel, CSV, JSON, and image formats, providing users with flexible options to analyze and share data.</li> </ul>"},{"location":"summary/#6-security-best-practices","title":"6. Security Best Practices","text":"<ul> <li>Security risks, such as SQL injection, are mitigated by enforcing read-only database access and running the app within a secure environment.</li> </ul>"},{"location":"summary/#7-multi-language-support","title":"7. Multi-Language Support","text":"<ul> <li>The agent and LLM support multiple languages, offering an inclusive experience for users from diverse linguistic backgrounds.</li> </ul>"},{"location":"summary/#8-adaptability-and-customization","title":"8. Adaptability and Customization","text":"<ul> <li>The workshop emphasizes the flexibility of the Foundry Agent Service, allowing you to adapt the agent for various use cases, such as customer support or competitive analysis, by modifying instructions and integrating additional tools.</li> </ul> <p>This workshop equips you with the knowledge and tools to build and extend conversational agents tailored to your business needs, leveraging the full capabilities of the Foundry Agent Service.</p>"},{"location":"_blogs/blog/","title":"Build Your First Agent with the Azure AI Foundry Agent Service: Self-Guided Workshop","text":"<p>Agentic AI is changing how we build intelligent apps\u2014enabling software to reason, plan, and act for us. Learning to build AI agents is quickly becoming a must-have skill for anyone working with AI.</p> <p>Try our self-guided workshop to get hands-on with Foundry Agent Service. You'll learn to build, deploy, and interact with agents using Azure's powerful tools.</p>"},{"location":"_blogs/blog/#what-is-foundry-agent-service","title":"What is Foundry Agent Service?","text":"<p>Foundry Agent Service lets you create, orchestrate, and manage AI-powered agents that can handle complex tasks, integrate with tools, and deploy securely.</p>"},{"location":"_blogs/blog/#what-will-you-learn","title":"What Will You Learn?","text":"<ul> <li>The basics of agentic AI and how agents differ from traditional models</li> <li>How to set up your Azure environment</li> <li>How to build your first agent: define goals, tools, and memory</li> <li>How to test and interact with your agent</li> <li>Advanced features like tool integration and memory management</li> </ul>"},{"location":"_blogs/blog/#who-is-this-for","title":"Who Is This For?","text":"<p>Anyone interested in building intelligent, goal-oriented agents\u2014developers, data scientists, and AI enthusiasts. No prior experience with Foundry Agent Service required.</p>"},{"location":"_blogs/blog/#how-does-the-workshop-work","title":"How Does the Workshop Work?","text":"<p>Tip: Select the <code>self-guided</code> tab in Getting Started for the right instructions.</p> <ul> <li>Step-by-step guides at your own pace</li> <li>Code samples and templates</li> <li>Real-world scenarios</li> </ul>"},{"location":"_blogs/blog/#get-started","title":"Get Started","text":"<p>See what agentic AI can do for you: https://microsoft.github.io/build-your-first-agent-with-azure-ai-agent-service-workshop/</p> <p>Build practical skills in one of AI\u2019s most exciting areas. Try the workshop and start building agents that make a difference!</p> <p>Questions or feedback? Visit the issues page.</p> <p>Happy learning and building with Foundry Agent Service!</p>"},{"location":"includes/introduction-event/","title":"Introduction event","text":""},{"location":"includes/introduction-event/#microsoft-build-attendees","title":"Microsoft Build Attendees","text":"<p>The instructions on this page assume you are attending Microsoft Build 2025 and have access to a pre-configured lab environment. This environment provides an Azure subscription with all the tools and resources needed to complete the workshop.</p>"},{"location":"includes/introduction-event/#introduction","title":"Introduction","text":"<p>This workshop is designed to teach you about the Azure AI Agents Service and the associated SDK. It consists of multiple labs, each highlighting a specific feature of the Azure AI Agents Service. The labs are meant to be completed in order, as each one builds on the knowledge and work from the previous lab.</p>"},{"location":"includes/introduction-event/#select-workshop-programming-language","title":"Select Workshop Programming Language","text":"<p>The workshop is available in both Python and C#. Please make sure to select the language that fits the lab room you are in, by using the language selector tabs. Note, don't switch languages mid-workshop.</p> <p>Select the language tab that matches your lab room:</p> PythonC# <p>The default language for the workshop is set to Python.</p> <p>The default language for the workshop is set to C#.</p>"},{"location":"includes/introduction-event/#authenticate-with-azure","title":"Authenticate with Azure","text":"<p>You need to authenticate with Azure so the agent app can access the Azure AI Agents Service and models. Follow these steps:</p> <ol> <li> <p>Open a terminal window. The terminal app is pinned to the Windows 11 taskbar.</p> <p></p> </li> <li> <p>Run the following command to authenticate with Azure:</p> <pre><code>az login\n</code></pre> <p>Note</p> <p>You'll be prompted to open a browser link and log in to your Azure account.</p> <ol> <li> <p>A browser window will open automatically, select Work or school account and click Next.</p> </li> <li> <p>Use the Username and Password found in the top section of the Resources tab in the lab environment.</p> </li> <li> <p>Select OK, then Done.</p> </li> </ol> </li> <li> <p>Then select the Default subscription from the command line, by clicking on Enter.</p> </li> <li> <p>Once you've logged in, run the following command to assign the user role to the resource group:</p> <pre><code>$subId = $(az account show --query id --output tsv) `\n;$objectId = $(az ad signed-in-user show --query id -o tsv) `\n; az role assignment create --role \"f6c7c914-8db3-469d-8ca1-694a8f32e121\" --assignee-object-id $objectId --scope /subscriptions/$subId/resourceGroups/\"rg-agent-workshop\" --assignee-principal-type 'User'\n</code></pre> </li> <li> <p>Leave the terminal window open for the next steps.</p> </li> </ol>"},{"location":"includes/introduction-event/#open-the-workshop","title":"Open the Workshop","text":"<p>Follow these steps to open the workshop in Visual Studio Code:</p> PythonC# <ol> <li> <p>From the terminal window, execute the following commands to clone the workshop repository, navigate to the relevant folder, set up a virtual environment, activate it, and install the required packages:</p> <pre><code>git clone https://github.com/microsoft/build-your-first-agent-with-azure-ai-agent-service-workshop.git `\n; cd build-your-first-agent-with-azure-ai-agent-service-workshop `\n; python -m venv src/python/workshop/.venv `\n; src\\python\\workshop\\.venv\\Scripts\\activate `\n; pip install -r src/python/workshop/requirements.txt `\n; code --install-extension tomoki1207.pdf\n</code></pre> </li> <li> <p>Open in VS Code. From the terminal window, run the following command:</p> <pre><code>code .vscode\\python-workspace.code-workspace\n</code></pre> <p>When the project opens in VS Code, two notifications appear in the bottom right corner. Click \u2716 to close both notifications.</p> </li> </ol> <ol> <li> <p>From a terminal window, execute the following commands to clone the workshop repository:</p> <pre><code>git clone https://github.com/microsoft/build-your-first-agent-with-azure-ai-agent-service-workshop.git\n</code></pre> </li> </ol> VS CodeVisual Studio 2022 <ol> <li> <p>Open the workshop in Visual Studio Code. From the terminal window, run the following command:</p> <pre><code>code build-your-first-agent-with-azure-ai-agent-service-workshop\\.vscode\\csharp-workspace.code-workspace\n</code></pre> </li> </ol> <p>When the project opens in VS Code, a notification will appear in the bottom right corner to install the C# extension. Click Install to install the C# extension, as this will provide the necessary features for C# development.</p> <ol> <li> <p>Open the workshop in Visual Studio 2022. From the terminal window, run the following command:</p> <pre><code>start build-your-first-agent-with-azure-ai-agent-service-workshop\\src\\csharp\\workshop\\AgentWorkshop.sln\n</code></pre> <p>You may be asked what program to open the solution with. Select Visual Studio 2022.</p> </li> </ol>"},{"location":"includes/introduction-event/#azure-ai-foundry-project-endpoint","title":"Azure AI Foundry Project Endpoint","text":"<p>Next, we log in to Azure AI Foundry to retrieve the project endpoint, which the agent app uses to connect to the Azure AI Agents Service.</p> <ol> <li>Navigate to the Azure AI Foundry website.</li> <li>Select Sign in and use the Username and Password found in the top section of the Resources tab in the lab environment. Click on the Username and Password fields to automatically fill in the login details.     </li> <li>Read the introduction to the Azure AI Foundry and click Got it.</li> <li>Navigate to All Resources to view the list of AI resources that have been pre-provisioned for you.</li> <li>Select the resource name that starts with prj-contoso-agent-nnnnnn.</li> <li>Review the introduction guide and click Close.</li> <li> <p>From the Overview sidebar menu, locate the Endpoints and keys -&gt; Libraries -&gt; Azure AI Foundry section, click the Copy icon to copy the Azure AI Foundry project endpoint.</p> <p></p> </li> </ol> PythonC#"},{"location":"includes/introduction-event/#configure-the-workshop","title":"Configure the Workshop","text":"<ol> <li>Switch back to the workshop you opened in VS Code.</li> <li> <p>Rename the <code>.env.sample</code> file to <code>.env</code>.</p> <ul> <li>Select the .env.sample file in the VS Code Explorer panel.</li> <li>Right-click the file and select Rename, or press F2.</li> <li>Change the file name to <code>.env</code> and press Enter.</li> </ul> </li> <li> <p>Paste the Project endpoint you copied from Azure AI Foundry into the <code>.env</code> file.</p> <pre><code>PROJECT_ENDPOINT=\"&lt;project endpoint&gt;\"\n</code></pre> <p>Your <code>.env</code> file should look similar to this but with your project endpoint.</p> <pre><code>MODEL_DEPLOYMENT_NAME=\"gpt-4o-mini\"\nPROJECT_ENDPOINT=\"&lt;project endpoint&gt;\"\n</code></pre> </li> <li> <p>Save the <code>.env</code> file.</p> </li> </ol>"},{"location":"includes/introduction-event/#project-structure","title":"Project Structure","text":"<p>Be sure to familiarize yourself with the key subfolders and files you\u2019ll be working with throughout the workshop.</p> <ol> <li>The main.py file: The entry point for the app, containing its main logic.</li> <li>The sales_data.py file: The function logic to execute dynamic SQL queries against the SQLite database.</li> <li>The stream_event_handler.py file: Contains the event handler logic for token streaming.</li> <li>The shared/files folder: Contains the files created by the agent app.</li> <li>The shared/instructions folder: Contains the instructions passed to the LLM.</li> </ol> <p></p>"},{"location":"includes/introduction-event/#configure-the-workshop_1","title":"Configure the Workshop","text":"<ol> <li> <p>Open a terminal and navigate to the src/csharp/workshop/AgentWorkshop.Client folder.</p> <pre><code>cd build-your-first-agent-with-azure-ai-agent-service-workshop\\src\\csharp\\workshop\\AgentWorkshop.Client\n</code></pre> </li> <li> <p>Add the Project endpoint you copied from Azure AI Foundry to the user secrets.</p> <pre><code>dotnet user-secrets set \"ConnectionStrings:AiAgentService\" \"&lt;your_project_endpoint&gt;\"\n</code></pre> </li> <li> <p>Add the Model deployment name to the user secrets.</p> <pre><code>dotnet user-secrets set \"Azure:ModelName\" \"gpt-4o-mini\"\n</code></pre> </li> </ol>"},{"location":"includes/introduction-event/#project-structure_1","title":"Project Structure","text":"<p>Be sure to familiarize yourself with the key subfolders and files you\u2019ll be working with throughout the workshop.</p>"},{"location":"includes/introduction-event/#the-workshop-folder","title":"The workshop folder","text":"<ul> <li>The Lab1.cs, Lab2.cs, Lab3.cs files: The entry point for each lab, containing its agent logic.</li> <li>The Program.cs file: The entry point for the app, containing its main logic.</li> <li>The SalesData.cs file: The function logic to execute dynamic SQL queries against the SQLite database.</li> </ul>"},{"location":"includes/introduction-event/#the-shared-folder","title":"The shared folder","text":"<ul> <li>The files folder: Contains the files created by the agent app.</li> <li>The fonts folder: Contains the multilingual fonts used by Code Interpreter.</li> <li>The instructions folder: Contains the instructions passed to the LLM.</li> </ul>"},{"location":"includes/introduction-event/#pro-tips","title":"Pro Tips","text":"<p>Tips</p> <ol> <li>The Burger Menu in the right-hand panel of the lab environment offers additional features, including the Split Window View and the option to end the lab. The Split Window View allows you to maximize the lab environment to full screen, optimizing screen space. The lab's Instructions and Resources panel will open in a separate window.</li> <li>If the lab instructions are slow to scroll in the lab environment, try copying the instructions\u2019 URL and opening it in your computer\u2019s local browser for a smoother experience.</li> <li>If you have trouble viewing an image, simply click the image to enlarge it.</li> </ol>"},{"location":"includes/introduction-self-guided/","title":"Introduction self guided","text":""},{"location":"includes/introduction-self-guided/#self-guided-learners","title":"Self-Guided Learners","text":"<p>These instructions are for self-guided learners who do not have access to a pre-configured lab environment. Follow these steps to set up your environment and begin the workshop.</p>"},{"location":"includes/introduction-self-guided/#introduction","title":"Introduction","text":"<p>This workshop is designed to teach you about the Azure AI Agents Service and the associated SDK. It consists of multiple labs, each highlighting a specific feature of the Azure AI Agents Service. The labs are meant to be completed in order, as each one builds on the knowledge and work from the previous lab.</p>"},{"location":"includes/introduction-self-guided/#prerequisites","title":"Prerequisites","text":"<ol> <li>Access to an Azure subscription. If you don't have an Azure subscription, create a free account before you begin.</li> <li>You need a GitHub account. If you don\u2019t have one, create it at GitHub.</li> </ol>"},{"location":"includes/introduction-self-guided/#select-workshop-programming-language","title":"Select Workshop Programming Language","text":"<p>The workshop is available in both Python and C#. Use the language selector tabs to choose your preferred language. Note, don't switch languages mid-workshop.</p> <p>Select the tab for your preferred language:</p> PythonC# <p>The default language for the workshop is set to Python.</p> <p>The default language for the workshop is set to C#.</p>"},{"location":"includes/introduction-self-guided/#open-the-workshop","title":"Open the Workshop","text":"<p>The preferred way to run this workshop is using GitHub Codespaces. This option provides a pre-configured environment with all the tools and resources needed to complete the workshop. Alternatively, you can open the workshop locally using a Visual Studio Code Dev Container.</p> GitHub CodespacesVS Code Dev Container <p>Select Open in GitHub Codespaces to open the project in GitHub Codespaces.</p> <p></p> <p>Building the Codespace will take several minutes. You can continue reading the instructions while it builds.</p> <p>Apple Silicon Users</p> <p>The automated deployment script you\u2019ll be running soon isn\u2019t supported on Apple Silicon. Please run the deployment script from Codespaces or from macOS instead of the Dev Container.</p> <p>Alternatively, you can open the project locally using a Visual Studio Code Dev Container, which will open the project in your local VS Code development environment using the Dev Containers extension.</p> <ol> <li>Start Docker Desktop (install it if not already installed)</li> <li> <p>Select Dev Containers Open to open the project in a VS Code Dev Container.</p> <p></p> </li> </ol> <p>The process of building the Dev Container, which involves downloading and setting it up on your local system, will take several minutes. During this time, you can continue reading the instructions.</p>"},{"location":"includes/introduction-self-guided/#authenticate-with-azure","title":"Authenticate with Azure","text":"<p>You need to authenticate with Azure so the agent app can access the Azure AI Agents Service and models. Follow these steps:</p> <ol> <li>Ensure the Codespace has been created.</li> <li>In the Codespace, open a new terminal window by selecting Terminal &gt; New Terminal from the VS Code menu.</li> <li> <p>Run the following command to authenticate with Azure:</p> <pre><code>az login --use-device-code\n</code></pre> <p>Note</p> <p>You'll be prompted to open a browser link and log in to your Azure account. Be sure to copy the authentication code first.</p> <ol> <li>A browser window will open automatically, select your account type and click Next.</li> <li>Sign in with your Azure subscription Username and Password.</li> <li>Paste the authentication code.</li> <li>Select OK, then Done.</li> </ol> <p>Warning</p> <p>If you have multiple Azure tenants, then you will need to select the appropriate tenant when authenticating.</p> <pre><code>az login --use-device-code --tenant &lt;tenant_id&gt;\n</code></pre> </li> <li> <p>Next, select the appropriate subscription from the command line.</p> </li> <li>Leave the terminal window open for the next steps.</li> </ol>"},{"location":"includes/introduction-self-guided/#deploy-the-azure-resources","title":"Deploy the Azure Resources","text":"<p>The following resources will be created in the rg-contoso-agent-workshop-nnnn resource group in your Azure subscription.</p> <ul> <li>An Azure AI Foundry hub named fdy-contoso-agent-nnnn</li> <li>An Azure AI Foundry project named prj-contoso-agent-nnnn</li> <li>A Serverless (pay-as-you-go) GPT-4o-mini model deployment named gpt-4o-mini. See pricing details here.</li> </ul> <p>You will need 120K TPM quota availability for the gpt-4o-mini Global Standard SKU, not because the agent uses lots of tokens, but due to the frequency of calls made by the agent to the model. Review your quota availability in the AI Foundry Management Center.</p> <p>We have provided a bash script to automate the deployment of the resources required for the workshop.</p> <p>The script <code>deploy.sh</code> deploys to the <code>westus</code> region by default; edit the file to change the region or resource names. To run the script, open the VS Code terminal and run the following command:</p> <pre><code>cd infra &amp;&amp; ./deploy.sh\n</code></pre>"},{"location":"includes/introduction-self-guided/#workshop-configuration","title":"Workshop Configuration","text":"PythonC# <p>The deploy script generates the .env file, which contains the project endpoint, model deployment name. </p> <p>You'll see this file when you open the Python workspace in VS Code. Your .env file will look similar to this but with your project endpoint.</p> <pre><code>MODEL_DEPLOYMENT_NAME=\"gpt-4o-mini\"\nPROJECT_ENDPOINT=\"&lt;your_project_endpoint&gt;\"\n</code></pre> <p>The automated deployment script stores project variables securely by using the Secret Manager feature for safe storage of app secrets in development in ASP.NET Core.</p> <p>You can view the secrets by running the following command after you have opened the C# workspace in VS Code:</p> <pre><code>dotnet user-secrets list\n</code></pre>"},{"location":"includes/introduction-self-guided/#selecting-the-language-workspace","title":"Selecting the Language Workspace","text":"<p>There are two workspaces in the workshop, one for Python and one for C#. The workspace contains the source code and all the files needed to complete the labs for each language. Choose the workspace that matches the language you want to work with.</p> PythonC# <ol> <li>In Visual Studio Code, go to File &gt; Open Workspace from File.</li> <li> <p>Replace the default path with the following:</p> <pre><code>/workspaces/build-your-first-agent-with-azure-ai-agent-service-workshop/.vscode/\n</code></pre> </li> <li> <p>Choose the file named python-workspace.code-workspace to open the workspace.</p> </li> </ol> <ol> <li>In Visual Studio Code, go to File &gt; Open Workspace from File.</li> <li> <p>Replace the default path with the following:</p> <pre><code>/workspaces/build-your-first-agent-with-azure-ai-agent-service-workshop/.vscode/\n</code></pre> </li> <li> <p>Choose the file named csharp-workspace.code-workspace to open the workspace.</p> </li> </ol>"},{"location":"includes/introduction-self-guided/#project-structure","title":"Project Structure","text":"<p>Be sure to familiarize yourself with the key folders and files you\u2019ll be working with throughout the workshop.</p>"},{"location":"includes/introduction-self-guided/#the-workshop-folder","title":"The workshop folder","text":"<ul> <li>The main.py file: The entry point for the app, containing its main logic.</li> <li>The sales_data.py file: The function logic to execute dynamic SQL queries against the SQLite database.</li> <li>The stream_event_handler.py file: Contains the event handler logic for token streaming.</li> </ul>"},{"location":"includes/introduction-self-guided/#the-shared-folder","title":"The shared folder","text":"<ul> <li>The files folder: Contains the files created by the agent app.</li> <li>The fonts folder: Contains the multilingual fonts used by Code Interpreter.</li> <li>The instructions folder: Contains the instructions passed to the LLM.</li> </ul>"},{"location":"includes/introduction-self-guided/#project-structure_1","title":"Project Structure","text":"<p>Be sure to familiarize yourself with the key folders and files you\u2019ll be working with throughout the workshop.</p>"},{"location":"includes/introduction-self-guided/#the-workshop-folder_1","title":"The workshop folder","text":"<ul> <li>The Lab1.cs, Lab2.cs, Lab3.cs files: The entry point for each lab, containing its agent logic.</li> <li>The Program.cs file: The entry point for the app, containing its main logic.</li> <li>The SalesData.cs file: The function logic to execute dynamic SQL queries against the SQLite database.</li> </ul>"},{"location":"includes/introduction-self-guided/#the-shared-folder_1","title":"The shared folder","text":"<ul> <li>The files folder: Contains the files created by the agent app.</li> <li>The fonts folder: Contains the multilingual fonts used by Code Interpreter.</li> <li>The instructions folder: Contains the instructions passed to the LLM.</li> </ul>"},{"location":"includes/lab-4-bing-search-event/","title":"Lab 4 bing search event","text":""},{"location":"includes/lab-4-bing-search-event/#grounding-with-bing-search","title":"Grounding with Bing Search","text":"<p>This lab requires the Grounding with Bing Search service. Follow the lab instructions to create the resource and connect it to the given Azure AI project. , </p>"},{"location":"includes/lab-4-bing-search-event/#lab-exercise","title":"Lab Exercise","text":"<p>In this lab, you'll enable Bing Grounding to provide competitive sales analysis of Contoso products and categories.</p>"},{"location":"includes/lab-4-bing-search-event/#create-a-grounding-with-bing-search-resource","title":"Create a Grounding with Bing Search resource","text":"<p>Follow these steps to create a Grounding with Bing Search Resource:</p> <ol> <li> <p>Click to create a Grounding with Bing Search Resource.</p> <p>Warning</p> <p>You may need to sign in to Azure and/or clear the welcome screen to access the Azure portal. Always use the Azure credentials provided in the Resources tab of the lab instructions.</p> </li> <li> <p>Select Create.</p> </li> <li>Select the rg-agent-workshop-**** resource group from the drop-down list.</li> <li> <p>Name the resource as follows:</p> <pre><code>groundingwithbingsearch\n</code></pre> </li> <li> <p>Select the Grounding with Bing Search pricing tier.</p> </li> <li>Confirm I confirm I have read and understood the notice above.</li> <li>Select Review + create.</li> <li>Select Create.</li> <li>Wait for deployment to complete, then click Go to resource.</li> <li>Click on the resource you just created.</li> <li>Select Overview from the sidebar menu.</li> <li>Select the Go to Azure AI Foundry Portal button.</li> </ol>"},{"location":"includes/lab-4-bing-search-event/#create-a-bing-search-connection-in-ai-foundry","title":"Create a Bing Search Connection in AI Foundry","text":"<p>Next, we will create a Bing Search connection in the Azure AI Foundry portal. This connection enables the agent app to access the Bing Search service using the agent Grounding-with-Bing-Search.</p> <p>To create a Bing Search connection in the Azure AI Foundry portal, follow these steps:</p> <ol> <li>Verify that your Foundry project-**** is selected.</li> <li>From the sidebar menu, click the Management Center button. The button is pinned at the bottom of the sidebar.</li> <li>From the sidebar menu, select Connected resources.</li> <li>Click + New connection.</li> <li>Scroll to the Knowledge section and select Grounding with Bing Search.</li> <li>Click the Add connection button to the right of your <code>groundingwithbingsearch</code> resource.</li> <li>Click Close</li> <li>Verify that the new API Key connection is listed among the connected resources (you might need to Refresh to view changes).</li> </ol> <p>For more information, visit the Grounding with Bing Search documentation.</p>"},{"location":"includes/lab-4-bing-search-event/#enable-grounding-with-bing-search-in-the-agent-app","title":"Enable Grounding with Bing Search in the Agent App","text":"PythonC# <ol> <li> <p>Open the file <code>main.py</code>.</p> </li> <li> <p>Uncomment the following lines by removing the \"# \" characters</p> <pre><code># bing_grounding = BingGroundingTool(connection_id=AZURE_BING_CONNECTION_ID)\n# toolset.add(bing_grounding)\n</code></pre> <p>Warning</p> <p>The lines to be uncommented are not adjacent. When removing the # character, ensure you also delete the space that follows it.</p> </li> <li> <p>Review the code in the <code>main.py</code> file.</p> <p>After uncommenting, your code should look like this:</p> <pre><code>INSTRUCTIONS_FILE = \"instructions/function_calling.txt\"\nINSTRUCTIONS_FILE = \"instructions/file_search.txt\"\nINSTRUCTIONS_FILE = \"instructions/code_interpreter.txt\"\nINSTRUCTIONS_FILE = \"instructions/bing_grounding.txt\"\n# INSTRUCTIONS_FILE = \"instructions/code_interpreter_multilingual.txt\"\n\n\nasync def add_agent_tools() -&gt; None:\n    \"\"\"Add tools for the agent.\"\"\"\n    font_file_info = None\n\n    # Add the functions tool\n    toolset.add(functions)\n\n    # Add the tents data sheet to a new vector data store\n    vector_store = await utilities.create_vector_store(\n        agents_client,\n        files=[TENTS_DATA_SHEET_FILE],\n        vector_store_name=\"Contoso Product Information Vector Store\",\n    )\n    file_search_tool = FileSearchTool(vector_store_ids=[vector_store.id])\n    toolset.add(file_search_tool)\n\n    # Add the code interpreter tool\n    code_interpreter = CodeInterpreterTool()\n    toolset.add(code_interpreter)\n\n    # Add the Bing grounding tool\n    bing_grounding = BingGroundingTool(connection_id=AZURE_BING_CONNECTION_ID)\n    toolset.add(bing_grounding)\n    # Add multilingual support to the code interpreter\n    # font_file_info = await utilities.upload_file(agents_client, utilities.shared_files_path / FONTS_ZIP)\n    # code_interpreter.add_file(file_id=font_file_info.id)\n\n    return font_file_info\n</code></pre> </li> </ol> <ol> <li>Open the <code>Program.cs</code> file.</li> <li> <p>Update the creation of the lab to use the <code>Lab4</code> class.</p> <pre><code>await using Lab lab = new Lab4(projectClient, apiDeploymentName, builder.Configuration);\n</code></pre> </li> <li> <p>Review the <code>Lab4.cs</code> class to see how <code>InitialiseLabTools</code> is used to add the Bing Grounding tool to the agent.</p> </li> </ol>"},{"location":"includes/lab-4-bing-search-event/#review-the-instructions","title":"Review the Instructions","text":"<ol> <li>Open the shared/instructions/bing_grounding.txt file. This file replaces the instructions used in the previous lab.</li> <li> <p>The Tools section now includes a \u201cCompetitive Insights for Products and Categories\u201d capability, enabling the agent to:</p> <ul> <li>Use Bing Search to gather competitor product names, company names, and prices.</li> <li>Restrict responses to topics related to outdoor camping and sports gear.</li> <li>Ensure search results are concise and directly relevant to the query.</li> </ul> </li> </ol>"},{"location":"includes/lab-4-bing-search-event/#run-the-agent-app","title":"Run the Agent App","text":"<p>First, launch the app from the terminal as before:</p> <ol> <li>Press F5 to run the app.</li> </ol>"},{"location":"includes/lab-4-bing-search-event/#start-a-conversation-with-the-agent","title":"Start a Conversation with the Agent","text":"<p>The agent combines data from the Contoso sales database, the Tents Data Sheet, and Bing Search to provide comprehensive responses, so the results will vary depending on the query.</p> <ol> <li> <p>What beginner tents do we sell?</p> <p>Info</p> <p>This information mainly comes from the file we provided in the vector information store.</p> </li> <li> <p>What beginner tents do our competitors sell? Include prices.</p> <p>Info</p> <p>This information comes from the internet, and includes real-world product names and prices.</p> </li> <li> <p>Show as a bar chart</p> <p>Info</p> <p>AI Agent Service is again using Code Interpreter to create the chart, but this time with real-world data sourced in the previous query. As before, look in <code>shared/files</code> to view the chart.</p> </li> <li> <p>Show the tents we sell by region that are a similar price to our competitors beginner tents.</p> <p>Info</p> <p>This query relies on the reasoning capabilities of the underlying large language model, along with the data returned by function calling.</p> </li> <li> <p>Download the data as a human-readable JSON file</p> <p>Info</p> <p>This query again relies on Code Interpreter to create the file from the context in the previous queries.</p> </li> </ol>"},{"location":"includes/lab-4-bing-search-event/#stop-the-agent-app","title":"Stop the Agent App","text":"<ol> <li>Type save to save the agent app state. This stops the agent app without deleting its state, allowing you to explore the agent in the Azure AI Foundry\u2019s Agents playground.</li> <li>Press Shift+F5 to stop debugging the agent app.</li> <li> <p>Copy the Agent ID from the terminal output. The Agent ID is required to explore the agent in the Azure AI Foundry portal. The Agent ID will look similar to this example:</p> <pre><code>Agent ID: asst_pskNeFYuoCPogDnmfaqIUwoU\n</code></pre> </li> </ol>"},{"location":"includes/lab-4-bing-search-event/#explore-the-agent-in-azure-ai-foundry","title":"Explore the Agent in Azure AI Foundry","text":"<p>The Azure AI Foundry includes a playground that lets you interact with the agent app and test how it responds to various queries. Keep in mind that this playground is not a full chatbot experience\u2014it\u2019s a testing tool. Also, you won\u2019t have real-time access to the Contoso sales database, as that resource is available only locally.</p> <ol> <li>From your browser, navigate to the Azure AI Foundry portal.</li> <li>Select Playgrounds from the left-hand navigation.</li> <li>Select Try the Agents playground.</li> <li>Select the recommended Azure OpenAI Service resource from the dropdown menu - which is the one connected to your project. Click on Let's go.</li> <li>Verify that the Agent ID you copied earlier is the same you see into the Agent id field.</li> </ol>"},{"location":"includes/lab-4-bing-search-event/#review-the-agents-instructions","title":"Review the Agent's Instructions","text":"<p>You'll recognize the instructions from the <code>instructions_bing_grounding.txt</code> file. These instructions are used to guide the agent in responding to queries.</p>"},{"location":"includes/lab-4-bing-search-event/#start-a-conversation-with-the-agent-in-the-playground","title":"Start a Conversation with the Agent in the Playground","text":"<p>Use the playground to test different queries and observe how the agent responds. You can reuse the same queries from the terminal or try new ones. Keep in mind that the agent pulls information from the Tents Data Sheet and Bing Search, but unlike the local app version, it does not have access to the Contoso sales database.</p> <p></p>"},{"location":"includes/lab-4-bing-search-self-guided/","title":"Lab 4 bing search self guided","text":""},{"location":"includes/lab-4-bing-search-self-guided/#grounding-with-bing-search","title":"Grounding with Bing Search","text":"<p>This lab requires the Grounding with Bing Search service, which may not be available in your Azure subscription. To check if you have access, follow the lab instructions to create the resource, if you don\u2019t have access, an error message will appear. Even if you\u2019re unable to use the service, be sure to read through the lab to understand how Grounding with Bing Search works.</p>"},{"location":"includes/lab-4-bing-search-self-guided/#lab-exercise","title":"Lab Exercise","text":"<p>In this lab, you'll enable Bing Grounding to provide competitive sales analysis of Contoso products and categories.</p>"},{"location":"includes/lab-4-bing-search-self-guided/#create-a-grounding-with-bing-search-resource","title":"Create a Grounding with Bing Search resource","text":"<p>You'll need to create a Grounding with Bing Search Service resource in the Azure portal and connect it to the Azure AI Foundry portal.</p> <p>Follow these steps to create a Grounding with Bing Search Resource:</p> <ol> <li> <p>Click to create a Grounding with Bing Search Resource.</p> <p>Warning</p> <p>You may need to sign in to your Azure account and or clear the welcome screen to access the Azure portal.</p> </li> <li> <p>Select Create.</p> </li> <li>Select the rg-agent-workshop-**** resource group from the drop-down list.</li> <li> <p>Name the resource as follows:</p> <pre><code>groundingwithbingsearch\n</code></pre> </li> <li> <p>Select the Grounding with Bing Search pricing tier.</p> </li> <li>Confirm I confirm I have read and understood the notice above.</li> <li>Select Review + create.</li> <li>Select Create.</li> <li>Wait for deployment to complete, then click Go to resource.</li> <li>Select Overview from the sidebar menu.</li> <li>Select the Go to Azure AI Foundry Portal button.</li> </ol>"},{"location":"includes/lab-4-bing-search-self-guided/#create-a-bing-search-connection-in-ai-foundry","title":"Create a Bing Search Connection in AI Foundry","text":"<p>Next, we will create a Bing Search connection in the Azure AI Foundry portal. This connection enables the agent app to access the Bing Search service using the agent Grounding-with-Bing-Search.</p> <p>To create a Bing Search connection in the Azure AI Foundry portal, follow these steps:</p> <ol> <li>Verify that your Foundry project-**** is selected.</li> <li>From the sidebar menu, click the Management Center button. The button is pinned at the bottom of the sidebar.</li> <li>From the sidebar menu, select Connected resources.</li> <li>Click + New connection.</li> <li>Scroll to the Knowledge section and select Grounding with Bing Search.</li> <li>Click the Add connection button to the right of your <code>groundingwithbingsearch</code> resource.</li> <li>Click Close</li> </ol> <p>For more information, visit the Grounding with Bing Search documentation.</p>"},{"location":"includes/lab-4-bing-search-self-guided/#enable-grounding-with-bing-search-in-the-agent-app","title":"Enable Grounding with Bing Search in the Agent App","text":"<ol> <li> <p>Open the file <code>main.py</code>.</p> </li> <li> <p>Uncomment the following lines by removing the \"# \" characters</p> <pre><code># bing_grounding = BingGroundingTool(connection_id=AZURE_BING_CONNECTION_ID)\n# toolset.add(bing_grounding)\n</code></pre> <p>Warning</p> <p>The lines to be uncommented are not adjacent. When removing the # character, ensure you also delete the space that follows it.</p> </li> <li> <p>Review the code in the <code>main.py</code> file.</p> <p>After uncommenting, your code should look like this:</p> <pre><code>INSTRUCTIONS_FILE = \"instructions/function_calling.txt\"\nINSTRUCTIONS_FILE = \"instructions/file_search.txt\"\nINSTRUCTIONS_FILE = \"instructions/code_interpreter.txt\"\nINSTRUCTIONS_FILE = \"instructions/bing_grounding.txt\"\n# INSTRUCTIONS_FILE = \"instructions/code_interpreter_multilingual.txt\"\n\n\nasync def add_agent_tools() -&gt; None:\n    \"\"\"Add tools for the agent.\"\"\"\n    font_file_info = None\n\n    # Add the functions tool\n    toolset.add(functions)\n\n    # Add the tents data sheet to a new vector data store\n    vector_store = await utilities.create_vector_store(\n        agents_client,\n        files=[TENTS_DATA_SHEET_FILE],\n        vector_store_name=\"Contoso Product Information Vector Store\",\n    )\n    file_search_tool = FileSearchTool(vector_store_ids=[vector_store.id])\n    toolset.add(file_search_tool)\n\n    # Add the code interpreter tool\n    code_interpreter = CodeInterpreterTool()\n    toolset.add(code_interpreter)\n\n    # Add the Bing grounding tool\n    bing_grounding = BingGroundingTool(connection_id=AZURE_BING_CONNECTION_ID)\n    toolset.add(bing_grounding)\n\n    # Add multilingual support to the code interpreter\n    # font_file_info = await utilities.upload_file(agents_client, utilities.shared_files_path / FONTS_ZIP)\n    # code_interpreter.add_file(file_id=font_file_info.id)\n\n    return font_file_info\n</code></pre> </li> </ol>"},{"location":"includes/lab-4-bing-search-self-guided/#review-the-instructions","title":"Review the Instructions","text":"<ol> <li>Open the shared/instructions/bing_grounding.txt file. This file replaces the instructions used in the previous lab.</li> <li> <p>The Tools section now includes a \u201cCompetitive Insights for Products and Categories\u201d capability, enabling the agent to:</p> <ul> <li>Use Bing Search to gather competitor product names, company names, and prices.</li> <li>Restrict responses to topics related to outdoor camping and sports gear.</li> <li>Ensure search results are concise and directly relevant to the query.</li> </ul> </li> </ol>"},{"location":"includes/lab-4-bing-search-self-guided/#run-the-agent-app","title":"Run the Agent App","text":"<p>First, launch the app from the terminal as before:</p> <ol> <li>Press F5 to run the app.</li> </ol>"},{"location":"includes/lab-4-bing-search-self-guided/#start-a-conversation-with-the-agent","title":"Start a Conversation with the Agent","text":"<p>The agent combines data from the Contoso sales database, the Tents Data Sheet, and Bing Search to provide comprehensive responses, so the results will vary depending on the query.</p> <ol> <li> <p>What beginner tents do we sell?</p> <p>Info</p> <p>This information mainly comes from the file we provided in the vector information store.</p> </li> <li> <p>What beginner tents do our competitors sell? Include prices.</p> <p>Info</p> <p>This information comes from the internet, and includes real-world product names and prices.</p> </li> <li> <p>Show as a bar chart</p> <p>Info</p> <p>AI Agent Service is again using Code Interpreter to create the chart, but this time with real-world data sourced in the previous query. As before, look in <code>shared/files</code> to view the chart.</p> </li> <li> <p>Show the tents we sell by region that are a similar price to our competitors beginner tents.</p> <p>Info</p> <p>This query relies on the reasoning capabilities of the underlying large language model, along with the data returned by function calling.</p> </li> <li> <p>Download the data as a human-readable JSON file</p> <p>Info</p> <p>This query again relies on Code Interpreter to create the file from the context in the previous queries.</p> </li> </ol>"},{"location":"includes/lab-4-bing-search-self-guided/#stop-the-agent-app","title":"Stop the Agent App","text":"<ol> <li>Type save to save the agent app state. This stops the agent app without deleting its state, allowing you to explore the agent in the Azure AI Foundry\u2019s Agents playground.</li> <li>Press Shift+F5 to stop debugging the agent app.</li> <li> <p>Copy the Agent ID from the terminal output. The Agent ID is required to explore the agent in the Azure AI Foundry portal. The Agent ID will look similar to this example:</p> <pre><code>Agent ID: asst_pskNeFYuoCPogDnmfaqIUwoU\n</code></pre> </li> </ol>"},{"location":"includes/lab-4-bing-search-self-guided/#explore-the-agent-in-azure-ai-foundry","title":"Explore the Agent in Azure AI Foundry","text":"<p>The Azure AI Foundry includes a playground that lets you interact with the agent app and test how it responds to various queries. Keep in mind that this playground is not a full chatbot experience\u2014it\u2019s a testing tool. Also, you won\u2019t have real-time access to the Contoso sales database, as that resource is available only locally.</p> <ol> <li>From your browser, navigate to the Azure AI Foundry portal.</li> <li>Select Playgrounds from the left-hand navigation.</li> <li>Select Try the Agents playground.</li> <li>Paste the Agent ID you copied earlier into the Agent id field.</li> </ol>"},{"location":"includes/lab-4-bing-search-self-guided/#review-the-agents-instructions","title":"Review the Agent's Instructions","text":"<p>You'll recognize the instructions from the <code>instructions_bing_grounding.txt</code> file. These instructions are used to guide the agent in responding to queries.</p>"},{"location":"includes/lab-4-bing-search-self-guided/#start-a-conversation-with-the-agent-in-the-playground","title":"Start a Conversation with the Agent in the Playground","text":"<p>Use the playground to test different queries and observe how the agent responds. You can reuse the same queries from the terminal or try new ones. Keep in mind that the agent pulls information from the Tents Data Sheet and Bing Search, but unlike the local app version, it does not have access to the Contoso sales database.</p> <p></p>"},{"location":"includes/lab-6-finishing-up-event/","title":"Lab 6 finishing up event","text":"<p>That's all for the lab portion of this workshop. Read on for key takeaways and additional resources, but first let's make it easy for you to retrieve and re-use this workshop material back home.</p>"},{"location":"includes/lab-6-finishing-up-event/#star-the-github-repository","title":"Star the GitHub Repository","text":"<p>If you have a GitHub account, you can \"star\" this repository to make it easy for you to find again in the future.</p> <ul> <li>Visit the GitHub repository at: microsoft/build-your-first-agent-with-azure-ai-agent-service-workshop</li> <li>Log into your GitHub account</li> <li>Click Star in the top right</li> </ul> <p>To find this workshop again in the future, click your GitHub profile picture in the top-right and click Your stars.</p>"},{"location":"includes/lab-6-finishing-up-self-guided/","title":"Lab 6 finishing up self guided","text":"<p>That's all for the lab portion of this workshop. Read on for key takeaways and additional resources, but first let's tidy up.</p>"},{"location":"includes/lab-6-finishing-up-self-guided/#star-the-github-repository","title":"Star the GitHub Repository","text":"<p>If you have a GitHub account, you can \"star\" this repository to make it easy for you to find again in the future.</p> <ul> <li>Visit the GitHub repository at: microsoft/build-your-first-agent-with-azure-ai-agent-service-workshop</li> <li>Log into your GitHub account</li> <li>Click Star in the top right</li> </ul> <p>To find this workshop again in the future, click your GitHub profile picture in the top-right and click Your stars.</p>"},{"location":"includes/lab-6-finishing-up-self-guided/#clean-up-github-codespaces","title":"Clean up GitHub CodeSpaces","text":""},{"location":"includes/lab-6-finishing-up-self-guided/#save-your-changes-in-github","title":"Save your changes in GitHub","text":"<p>You can save any changes you have made to files during the workshop to your personal GitHub repository as a fork. This makes it easy to re-run the workshop with your customizations, and the workshop content will always remain available in your GitHub account.</p> <ul> <li>In VS Code, click the \"Source Control\" tool in the left pane. It's the third one down, or you can use the keyboard shortcut Control-Shift-G.</li> <li>In the field under \"Source Control\" enter <code>Agents Lab</code> and click \u2714\ufe0fCommit.</li> <li>Click Yes to the prompt \"There are no staged changes to commit.\"</li> <li>Click Sync Changes.</li> <li>Click OK to the prompt \"This action will pull and push commits from and to origin/main\".</li> </ul> <p>You now have your own copy of the workshop with your customizations in your GitHub account.</p>"},{"location":"includes/lab-6-finishing-up-self-guided/#delete-your-github-codespace","title":"Delete your GitHub codespace","text":"<p>Your GitHub CodeSpace will shut down by itself, but it will consume a small amount of your compute and storage allotment until it is deleted. (You can see your usage in your GitHub Billing summary.) You can safely delete the codespace now, as follows:</p> <ul> <li>Visit github.com/codespaces</li> <li>At the bottom of the page, click the \"...\" menu to the right of your active codespace</li> <li>Click Delete</li> <li>At the \"Are you sure?\" prompt, click Delete.</li> </ul>"},{"location":"includes/lab-6-finishing-up-self-guided/#delete-your-azure-resources","title":"Delete your Azure resources","text":"<p>Most of the resources you created in this lab are pay-as-you-go resources, meaning you won't be charged any more for using them. However, some storage services used by AI Foundry may incur small ongoing charges. To delete all resources, follow these steps:</p> <ul> <li>Visit the Azure Portal</li> <li>Click Resource groups</li> <li>Click on your resource group <code>rg-agent-workshop-****</code></li> <li>Click Delete Resource group</li> <li>In the field at the bottom \"Enter resource group name to confirm deletion\" enter <code>rg-agent-workshop-****</code></li> <li>Click Delete</li> <li>At the Delete Confirmation prompt, click \"Delete\"</li> </ul>"}]}